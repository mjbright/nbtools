
TF_STATE_DIR=~/tmp/TF_state_list
mkdir -p $TF_STATE_DIR

## -- Terraform functions: -----------------------------------

#echo "OK-beginning"

function TF_INIT {
    NB_DEBUG $TF init $*
    $TF init $*
    __RETURN
}

function __TF_ARGS {
    TIME=""
    QUIET=0

    [ -z "$1"      ] && TIME="time "
    [ "$1" = "-t"  ] && { TIME="time "; return 1; }
    [ "$1" = "-q"  ] && { QUIET=1; return 1; }
    [ "$1" = "-qt" ] && { QUIET=1; TIME="time "; return 1; }
    [ "$1" = "-tq" ] && { QUIET=1; TIME="time "; return 1; }

    # Don't shift
    return 0
}

function TF_PLAN {
    NB_DEBUG $TF plan $*
    #__RETURN
     __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}$TF plan $* |
            tee /tmp/PLAN.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}$TF plan $*
    fi
    NB_DEBUG $( TIMER_STOP "$TF plan" )
    __RETURN
}

#echo "OK-before TF_APPLY"

function TF_APPLY {
    NB_DEBUG terraform apply $*
     __TF_ARGS "$1" || shift
    NB_DEBUG terraform apply $*

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}$TF apply -auto-approve $* |
            tee /tmp/APPLY.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}$TF apply -auto-approve $*
    fi
    NB_DEBUG $( TIMER_STOP 'terraform apply' )
    __RETURN
}

# What ??
#function ____TF_DESTROY {
    #TF_DESTROY $*
#}

#echo "OK-half"

function TF_STATE {
    NB_DEBUG $TF state $*
     __TF_ARGS "$1" || shift
    ${TIME}$TF state $*
    NB_DEBUG $( TIMER_STOP "$TF state" )
    __RETURN
}

function TF_OUTPUT {
    NB_DEBUG $TF output $*
     __TF_ARGS "$1" || shift
    ${TIME}$TF state $*
    NB_DEBUG $( TIMER_STOP "$TF output" )
    __RETURN
}

function TF_DESTROY {
    NB_DEBUG $TF destroy $*
     __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}$TF destroy -auto-approve $* |
            tee /tmp/DESTROY.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}$TF destroy -auto-approve $*
    fi
    NB_DEBUG $( TIMER_STOP "$TF destroy" )

    local NUM_RESOURCES=$( $TF state list | wc -l )
    [ $NUM_RESOURCES != "0" ] && {
        echo "ERROR: $NUM_RESOURCES resources remain $( $TF state list )"
        __RETURN 1 || return 1
    }
    __RETURN
}

## -- Terragrunt functions: -----------------------------------

function TG_RUN_ALL {
    SUBCOMMAND=$1; shift
    if [ "$SUBCOMMAND" = "state" ]; then
        #echo "STATE-sub='$1'"
        case "$1" in
            list) SUBCOMMAND="state list";;
            show) SUBCOMMAND="state show";;
        esac
        shift
    fi
    #AUTO="-auto-approve"
    AUTO="--terragrunt-non-interactive"
    NB_DEBUG terragrunt run-all $SUBCOMMAND $*

    __TF_ARGS "$1" || shift

    TIMER_START

    #set -x
    if [ $QUIET -ne 0 ]; then
        ${TIME}terragrunt run-all $SUBCOMMAND $AUTO $* |
            tee ~/tmp/TG_runall_$SUBCOMMAND.op |& grep -iE "complet|fail|error| to add|No changes"
    else
        ${TIME}terragrunt run-all $SUBCOMMAND $AUTO $*
    fi
    #set +x
    NB_DEBUG $( TIMER_STOP 'terragrunt $SUBCOMMAND' )
    __RETURN
}

function TG_PLAN {
    NB_DEBUG terragrunt plan $*

    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terragrunt plan $* |
            tee ~/tmp/TG_plan.op |& grep -iE "complet|fail|error| to add|No changes"
    else
        ${TIME}terragrunt plan $*
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt plan' )
    __RETURN
}

function TG_APPLY {
    NB_DEBUG terragrunt apply $*
    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terragrunt apply -auto-approve $* |
            tee ~/tmp/TG_apply.op |& grep -iE "complet|fail|error| to add|No changes"
    else
        ${TIME}terragrunt apply -auto-approve $*
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt apply' )
    __RETURN
}

function TG_DESTROY {
    NB_DEBUG terragrunt destroy $*
    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terragrunt destroy -auto-approve $* |
            tee ~/tmp/TG_destroy.op |& grep -iE "complet|fail|error| to add|No changes"
    else
        ${TIME}terragrunt destroy -auto-approve $*
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt destroy' )
    __RETURN
}

## -- Azure functions: -----------------------------------

function AZ_RESOURCES {
    az resource list | jq -rc '.[] | { type, name }'
}

function AZ_check {
    # Check we're studentN !!
    echo "(visible) Resource groups=$( az group list | jq -rc '.[].name' )"

    RGs=$( az group list | jq -rc '.[].name' )

    if [ "$RGs" != "studentN" ]; then
        echo "Error: Make sure to copy studentN credentials into ~/.azure"
        exit 1
    fi
    echo "OK"
}

#echo "OK-end"
