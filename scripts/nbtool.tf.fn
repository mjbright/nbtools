
TF_STATE_DIR=~/tmp/TF_state_list
mkdir -p $TF_STATE_DIR

## -- Terraform functions: -----------------------------------

#echo "OK-beginning"

function DO_CLEANUP {

    CONTAINERS=$( docker ps -aq )
    [ -z "$CONTAINERS" ] && echo "Cleanup: No containers to remove"
    [ ! -z "$CONTAINERS" ] && {
        echo "Cleanup: Destroying remaining containers: $CONTAINERS"
        set -x; docker rm -f $CONTAINERS; set +x;
    }

    USER_NETWORKS=$( docker network ls |
                     awk '$2 !~ /^bridge$/ && $2 !~ /^host$/ && $2 !~ /^none$/ && $3 !~ /^NAME$/ { print $2; }' )
    [ -z "$USER_NETWORKS" ] && echo "Cleanup: No user-networks to remove"
    [ ! -z "$USER_NETWORKS" ] && {
        echo "Cleanup: Destroying remaining user-created networks: $USER_NETWORKS"
        set -x; docker network rm $USER_NETWORKS; set +x;
    }

    return 0
}

function TF_INIT {
    NB_DEBUG $TF init $*
    TIMER_START
    $TF init $*
    RET=$?
    NB_DEBUG $( TIMER_STOP "$TF plan" )
    __RETURN $RET
}

function __TF_ARGS {
    QUIET=0

    # Remove use of TIME - always user TIMER_START/TIMER_STOP
    [ "$1" = "-q"  ] && { QUIET=1; return 1; }

    # Ignore 'legacy' -t argument:
    [ "$1" = "-qt" ] && { QUIET=1; return 1; }
    [ "$1" = "-tq" ] && { QUIET=1; return 1; }

    # Don't shift
    return 0
}

function TF_PLAN {
    NB_DEBUG $TF plan $*
    #__RETURN
     __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        $TF plan $* |
            tee /tmp/PLAN.op |& grep -iE "Plan:|complet|fail|error| to add"
        RET=$?
    else
        $TF plan $*
        RET=$?
    fi
    NB_DEBUG $( TIMER_STOP "$TF plan" )
    __RETURN $RET
}

#echo "OK-before TF_APPLY"

function TF_APPLY {
    NB_DEBUG $TF apply $*

    TF_STATE_FILE=""
    [ "$1" = "-chk" ] && {
        NB_DEBUG "TF_APPLY SAW -chk option: -chk $2"
        shift; TF_STATE_FILE=LAB${LAB_NUM}.${1}; shift
        # Save & check state list against saved state list (if present)
    }
    
    local BEFORE=$( $TF state list 2>/dev/null | wc -l )
     __TF_ARGS $* || shift
    NB_DEBUG $TF apply $*

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        echo yes | $TF apply $* | tee /tmp/APPLY.op |& grep -iE "Plan:|complet|fail|error| to add"
        RET=$?
    else
        echo yes | $TF apply $* | tee /tmp/APPLY.op
        RET=$?
    fi
    grep -i error: /tmp/APPLY.op && RET=1
    NB_DEBUG $( TIMER_STOP "$TF apply" )

    # Ignore saving state list if TF_STATE_FILE is unset:
    NB_DEBUG "INFO: \$TF_STATE_FILE=$TF_STATE_FILE"
    [ -z "$TF_STATE_FILE" ] && NB_DEBUG "WARNING: No -chk option"
    # Enable/disable for stopping when '-chk' not specified:

    local AFTER=$( $TF state list 2>/dev/null | wc -l )
    let   CREATED=AFTER-BEFORE
    NB_DEBUG "$CREATED resources created"

    NB_DEBUG "NB_TF_ENFORCE_CHK=$NB_TF_ENFORCE_CHK"
    [ ! -z "NB_TF_ENFORCE_CHK" ] && [ -z "$TF_STATE_FILE" ] && {
         NB_DEBUG "RETURN 1 because NB_TF_ENFORCE_CHK=$NB_TF_ENFORCE_CHK, and no '-chk' option"
         __RETURN 1 || return 1
    }
    [ -z "$TF_STATE_FILE" ] && __RETURN

    # Save state list:
    $TF state list > $TF_STATE_DIR/${TF_STATE_FILE}.new

    # If existing state list file, compare:
    [ -f $TF_STATE_DIR/${TF_STATE_FILE} ] && {
        diff $TF_STATE_DIR/${TF_STATE_FILE}.new $TF_STATE_DIR/${TF_STATE_FILE} \
            > $TF_STATE_DIR/${TF_STATE_FILE}.diff 2>&1
        [ $? -ne 0 ] && __RETURN 1 || return 1
    }

    __RETURN $RET
}

# What ??
#function ____TF_DESTROY {
    #TF_DESTROY $*
#}

#echo "OK-half"

function TF_STATE {
    NB_DEBUG $TF state $*
    TIMER_START
     __TF_ARGS "$1" || shift
    $TF state $*
    NB_DEBUG $( TIMER_STOP "$TF state" )
    __RETURN
}

function TF_SHOW {
    NB_DEBUG $TF show $*
    TIMER_START
     __TF_ARGS "$1" || shift
    $TF show $*
    NB_DEBUG $( TIMER_STOP "$TF show" )
    __RETURN
}

function TF_OUTPUT {
    NB_DEBUG $TF output $*
    TIMER_START
     __TF_ARGS "$1" || shift
    $TF output $*
    NB_DEBUG $( TIMER_STOP "$TF output" )
    __RETURN
}

function TF_DESTROY {
    NB_DEBUG $TF destroy $*
     __TF_ARGS "$1" || shift

    TIMER_START

    local BEFORE=$( $TF state list 2>/dev/null | wc -l )
    if [ $QUIET -ne 0 ]; then
        echo yes | $TF destroy $* |
            tee /tmp/DESTROY.op |& grep -iE "complet|fail|error| to add"
        RET=$?
    else
        echo yes | $TF destroy $*
        RET=$?
    fi
    NB_DEBUG $( TIMER_STOP "$TF destroy" )

    local AFTER=$( $TF state list 2>/dev/null | wc -l )
    [ $AFTER != "0" ] && {
        echo "ERROR: $AFTER resources remain $( $TF state list )"
        __RETURN 1 || return 1
    }
    NB_DEBUG "$BEFORE resources destroyed"
    __RETURN $RET
}

## -- Terragrunt functions: -----------------------------------

function TG_RUN_ALL {
    SUBCOMMAND=$1; shift
    if [ "$SUBCOMMAND" = "state" ]; then
        #echo "STATE-sub='$1'"
        case "$1" in
            list) SUBCOMMAND="state list";;
            show) SUBCOMMAND="state show";;
        esac
        shift
    fi
    #AUTO="-auto-approve"
    AUTO="--terragrunt-non-interactive"
    NB_DEBUG terragrunt run-all $SUBCOMMAND $*

    __TF_ARGS "$1" || shift

    TIMER_START

    #set -x
    if [ $QUIET -ne 0 ]; then
        echo yes | terragrunt run-all $SUBCOMMAND $AUTO $* |
            tee ~/tmp/TG_runall_$SUBCOMMAND.op |& grep -iE "complet|fail|error| to add|No changes"
        RET=$?
    else
        echo yes | terragrunt run-all $SUBCOMMAND $AUTO $*
        RET=$?
    fi
    #set +x
    NB_DEBUG $( TIMER_STOP 'terragrunt $SUBCOMMAND' )
    __RETURN $RET
}

function TG_PLAN {
    NB_DEBUG terragrunt plan $*

    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        terragrunt plan $* |
            tee ~/tmp/TG_plan.op |& grep -iE "complet|fail|error| to add|No changes"
        RET=$?
    else
        terragrunt plan $*
        RET=$?
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt plan' )
    __RETURN $RET
}

function TG_APPLY {
    NB_DEBUG terragrunt apply $*
    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        echo yes | terragrunt apply $* |
            tee ~/tmp/TG_apply.op |& grep -iE "complet|fail|error| to add|No changes"
        RET=$?
    else
        echo yes | terragrunt apply $*
        RET=$?
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt apply' )
    __RETURN $RET
}

function TG_DESTROY {
    NB_DEBUG terragrunt destroy $*
    __TF_ARGS "$1" || shift

    TIMER_START

    if [ $QUIET -ne 0 ]; then
        echo yes | terragrunt destroy $* |
            tee ~/tmp/TG_destroy.op |& grep -iE "complet|fail|error| to add|No changes"
        RET=$?
    else
        echo yes | terragrunt destroy $*
        RET=$?
    fi
    NB_DEBUG $( TIMER_STOP 'terragrunt destroy' )
    __RETURN $RET
}

## -- Azure functions: -----------------------------------

function AZ_RESOURCES {
    az resource list | jq -rc '.[] | { type, name }'
}

function AZ_check {
    # Check we're studentN !!
    echo "(visible) Resource groups=$( az group list | jq -rc '.[].name' )"

    RGs=$( az group list | jq -rc '.[].name' )

    if [ "$RGs" != "studentN" ]; then
        echo "Error: Make sure to copy studentN credentials into ~/.azure"
        exit 1
    fi
    echo "OK"
}

#echo "OK-end"
