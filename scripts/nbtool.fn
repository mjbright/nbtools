# Max number of chars/line to allow in markdown output:
# MAX_LEN_MD=110
# In practice 74 seems to be a good limit for the PDF output (tested using Safari/macOS):
MAX_LEN_MD=74

ENVIRONMENT="** NO ~/.environment **"
[ -f ~/.environment ] && ENVIRONMENT=$( head -1 ~/.environment )
#echo "$ENVIRONMENT $( ls -al ~/.environment 2>/dev/null)"

which banner >/dev/null && sudo apt install -y sysvbanner

HOSTNAME=$(hostname)

DEBUG_WAIT=0
WAIT_SLEEP=1

__NB_DEBUG() {
    local INFO="${PWD##*/} $(date +'%Y-%b-%d %0Hh%0Mm')"
    echo "__NB_DEBUG: $INFO"
    echo "__NB_DEBUG: $(id -un)@$(hostname):$PWD"
    echo "__NB_DEBUG: -- $*"
}

SHOW_LONG_LINES() {
    local IPFILE=""
    local MAX_LINE_LEN=80
    local LEFT_COLS=7

    while [ ! -z "$1" ]; do
        case $1 in
            -m) shift; MAX_LINE_LEN=$1;;
             *) IPFILE=$1;;
        esac
        shift
    done

    let MAX=MAX_LINE_LEN+LEFT_COLS

    # CAT input file with line numbers:
    # - if/cat: cat input file or stdin, with line numbers
    #           also sanitize output (control chars can mess up terminal colours)
    # - cut: select first columns with line number and columns after MAX_LINE_LEN chars
    # - grep: Remove lines with no extra chars (after column 80 of input file)
    #         By detecting lines with initial spaces, line number and then a TAB then end of line

    if [ ! -z "$IPFILE" ]; then
        cat -vn $IPFILE
    else
        cat -vn
    fi |
        cut -c 1-${LEFT_COLS},${MAX}-5000 |
        grep -v "^ *[0-9]*"$'\t'"$"
}

__FN_FILE_COMMON() {
    APPEND=0
    [ "$1" = "-a" ] && { APPEND=1; shift; }
    FILE=$1; shift
    # Assume no '/' in FILE:
    ## MD_FILE=".md.${FILE}"

    #cat >$FILE
    # Replace $STUDENT by it's value: also needs to be done in nbtool.py

    [ ! -d ~/tmp ] && mkdir -p ~/tmp

    sed -e "s/\$STUDENT/$STUDENT/g" -e "s/\${STUDENT}/${STUDENT}/g" > ~/tmp/file.$$

    grep -v ">>tomark:" ~/tmp/file.$$ | sed 's/>>tofile://g' |
       if [ $APPEND -eq 0 ]; then
          cat >$FILE
       else
          cat >>$FILE
       fi

    ## grep -v ">>tofile:" ~/tmp/file.$$ | sed 's/>>tomark://g' |
       ## if [ $APPEND -eq 0 ]; then
          ## cat >$MD_FILE
       ## else
          ## cat >>$MD_FILE
       ## fi

    rm ~/tmp/file.$$

    ls -al $FILE >> $LOG
}

__FN_NEW_FILE() {
    #set -x
    # NOTE: nbtool.py to replace this code_cell with markdown cell to say create a file with these contents
    FILE="$1"; shift
    local LOG=/tmp/__NEW_FILE

    echo "[$PWD] Writing to new file '$FILE'" >$LOG
    __FN_FILE_COMMON $FILE
}

__FN_MOD_FILE() {
    # NOTE: nbtool.py to replace this code_cell with markdown cell to say modify a file with these contents
    FILE="$1"; shift
    local LOG=/tmp/__MOD_FILE

    echo "[$PWD] Writing to file '$FILE'" >$LOG
    __FN_FILE_COMMON $FILE
}

__FN_APPEND_FILE() {
    # NOTE: nbtool.py to replace this code_cell with markdown cell to say append file with these contents
    FILE="$1"; shift
    local LOG=/tmp/__APPEND_FILE

    echo "[$PWD] Appending to file '$FILE'" >$LOG
    __FN_FILE_COMMON -a $FILE
}

#__FN_COLOUR() { grep --color always ''; }
#__FN_COLOUR() { sed -e 's/^/\\01b[1;34m/' -e 's/$/\\01b[0m/'; }

__FN_COLOUR() {
    # #  NORMAL;           BOLD;                 INVERSE;
    # _black='\e[00;30m';  _L_black='\e[01;30m';  _I_black='\e[07;30m'
    # _white='\e[00;37m';  _L_white='\e[01;37m';  _I_white='\e[07;37m'
    # _red='\e[00;31m';    _L_red='\e[01;31m';    _I_red='\e[07;31m'
    # _green='\e[00;32m';  _L_green='\e[01;32m'   _I_green='\e[07;32m'
    # _yellow='\e[00;33m'; _L_yellow='\e[01;33m'  _I_yellow='\e[07;33m'
    # _blue='\e[00;34m'    _L_blue='\e[01;34m'    _I_blue='\e[07;34m'
    # _magenta='\e[00;35m' _L_magenta='\e[01;35m' _I_magenta='\e[07;35m'
    # _cyan='\e[00;36m'    _L_cyan='\e[01;36m'    _I_cyan='\e[07;36m'

    case "$1" in
        red)       sed "s,.*,\x1B[31m&\x1B[0m,";;
        boldgreen) sed "s,.*,\x1B[01;32m&\x1B[0m,";;
        green)     sed "s,.*,\x1B[32m&\x1B[0m,";;
        yellow)    sed "s,.*,\x1B[33m&\x1B[0m,";;
        blue)      sed "s,.*,\x1B[34m&\x1B[0m,";;

        *)         sed "s,.*,\x1B[31m&\x1B[0m,";;
    esac
}

# STUFF TO DO: --------------------------------------------------------

# option to remove Nth argument  and comment
# e.g.
#    ls -al # STRIP_ARG 2 ==> 'ls'

# RECORD NEW FUNCTIONS: -----------------------------------------------

FN_0_LIST_ORIG=/tmp/nbtool.functions.0.list
FN_0_LIST=/tmp/nbtool.functions.0.list
FN_1_LIST=/tmp/nbtool.functions.1.list

if [ -f $FN_0_LIST ]; then
    FN_0_LIST=/tmp/nbtool.functions.0.rep.list
    FN_1_LIST=/tmp/nbtool.functions.1.rep.list
fi
typeset -f > $FN_0_LIST

# SETUP     FUNCTIONS: ------------------------------------------------
# Source .jupyer.profile, then demonstrate kubectl working:

DIE() {
    echo "[$PWD] die - $*" | __FN_HIGHLIGHT
    env | grep -E "NBTOOL|LAB"
    exit 1
}

CHECK_FILE_SIZE() {
    local FILE=$1; shift;
    local MIN_BYTES=$1; shift;

    #SIZE=$( stat -c %s $FILE )
    SIZE=$( wc -c < $FILE )
    [[ $SIZE -lt $MIN_BYTES ]] && {
        echo "File looks suspiciously small"
        ls -al $FILE 
        return 1
    }
    return 0
}

# START: TIMER FUNCTIONS ================================================

__TIMER_START() { START_S=`date +%s`; }

__TIMER_STOP() {
    LABEL=""
    [ ! -z "$1" ] && LABEL="[$*]: "

    END_S=`date +%s`
    let TOOK=END_S-START_S

    __TIMER_hhmmss $TOOK
    __TIMER_STOP="${LABEL}Took $TOOK secs [${HRS}h${MINS}m${SECS}]"
    echo $__TIMER_STOP
}

__TIMER_hhmmss() {
    _REM_SECS=$1; shift

    let SECS=_REM_SECS%60
    let _REM_SECS=_REM_SECS-SECS
    let MINS=_REM_SECS/60%60
    let _REM_SECS=_REM_SECS-60*MINS
    let HRS=_REM_SECS/3600

    [ $SECS -lt 10 ] && SECS="0$SECS"
    [ $MINS -lt 10 ] && MINS="0$MINS"
}

# __TIMER_START
# __TIMER_STOP "Sleep test"

# END: TIMER FUNCTIONS ================================================

__FN_INIT_NOTEBOOK() {
    #set -x
    NB=""
    if [ -z "$1" ]; then
        NB="README.ipynb"
    else
        NB=$( basename "$1" )
    fi

    [ ! -f "$NB" ] && DIE "[$PWD] No such notebook as '$NB'"

    echo
    echo "**** $(date): Notebook initialized on ${HOSTNAME} ${ENVIRONMENT}"; echo
    
    #set -x
    #set +x

    if [ -f README.ipynb ]; then
        if [ -f .dir ]; then
            # Detect moved dir with out of date ~/.dir
            [ "$PWD" != "$(cat .dir)" ] && DIE ".dir out of date";
            echo "Setting NB_DIR=$PWD"
            NB_DIR=$PWD
        else
            echo $PWD > .dir
        fi

        #echo "Setting NB_DIR=\$( cat $PWD/.dir )"
        #NB_DIR=$(cat .dir)
        export NB_DIR
        NB=$NB_DIR/$NB
        echo "NB_DIR=$NB_DIR" | __FN_HIGHLIGHT
    fi

    # To be used in markdown front-matter, picked up by Hugo/Printing to give PDF filename ...
    TITLE_MODE=""
    case $LAB_MODE in
        Terraform)
            TITLE_MODE="TF"
            rm -rf ~/tmp/terraform*
            echo; echo "==== Setting TF_DATA_DIR ===="
            export TF_DATA_DIR=~/dot.terraform
            echo "TF_DATA_DIR=$TF_DATA_DIR" | __FN_HIGHLIGHT_EOL =
            if [ -f ~/.aws/linked/student20.rc ]; then
                env | grep MYAWS_ACCOUNT_NAME= | __FN_HIGHLIGHT_EOL =
                echo; echo "==== Setting AWS vars for student20 account ===="
                . ~/.aws/linked/student20.rc; env | grep MYAWS_ACCOUNT_NAME= | __FN_HIGHLIGHT_EOL =
                #env | grep AWS_LINKED_ACCOUNT= | __FN_HIGHLIGHT_EOL =
                TITLE_MODE="TF-AWS"
            else
                echo; echo "==== No AWS vars ( ~/.aws/linked/student20.rc )"
            fi
            if [ -f ~/.student.rc ]; then
                env | grep MYAWS_ACCOUNT_NAME= | __FN_HIGHLIGHT_EOL =
                echo; echo "==== Setting AZURE vars for student account ===="
                . ~/.student.rc;
                env | grep AZURE_CONFIG_DIR= | __FN_HIGHLIGHT_EOL =
                env | grep ^ARM_.*=          | __FN_HIGHLIGHT_EOL =
                TITLE_MODE="TF-AZ"
            else
                echo; echo "==== No AZURE vars ( ~/.student.rc )"
            fi
            ;;
        Docker)
            TITLE_MODE="DO"
            echo "In Docker Mode"
            #exit 1
            ;;
        Kubernetes)
            TITLE_MODE="K8S"
            [ -z "$KUBECONFIG" ] && export KUBECONFIG=~/.kube/config
            echo "KUBECONFIG='$KUBECONFIG'"
            grep current-context "$KUBECONFIG" | grep -q kubernetes-admin && echo "## ASSUMING full cluster admin rights"
            grep server: $KUBECONFIG
            kubectl get nodes
            kubectl config get-contexts
            #DEBUG_WAIT=1; __CLEANUP; DEBUG_WAIT=0
            #kubectl delete pods -lapp=web-student0
            ;;

        *)
            echo "Error: Unknown LAB_MODE '$LAB_MODE' - should be one of Terraform or Kubernetes" | __FN_HIGHLIGHT
            banner ERR
            return
            ;;
    esac

    #rm -rf ~/labs
    #NO_EXEC echo SHOULD NOT BE SEEN | __FN_HIGHLIGHT_SOL SHOULD
    #EXEC    echo SHOULD BE SEEN     | __FN_HIGHLIGHT_SOL SHOULD

    #echo "LABTAG=$LAB_TAG" | __FN_HIGHLIGHT_EOL =
    echo
    echo "======== $LAB_MODE Lab weight[$LAB_WEIGHT] / tag[$LAB_TAG] / name[$LAB_NAME] ========" | __FN_HIGHLIGHT_EOL weight
    PDF_NAME=$( echo "$LAB_NAME" | sed -e 's/  */_/g' -e "s/^/${TITLE_MODE}_/" -e 's/_-_/-/g' )
    SET_FRONTMATTER "$PDF_NAME" "$LAB_WEIGHT"

    echo "NB_DIR=$NB_DIR"
    echo "NB=$NB"
    __FN_FILTER_NOTEBOOK $NB
}

__FN_LAB_ENV() {
    #set -x
    local REPO=""
    local SHA=""
    local DATE=""
    git remote -v >/dev/null 2>&1 | grep -q origin && {
        REPO=$( git remote -v | awk '/fetch/ { print $2; exit; }' | sed -e 's?ssh://?https://?' )
        SHA=$( git log | awk '{ print $2; exit; }' )
        DATE=$( git log | grep -m1 ^Date: | sed -e 's/Date: *//' )
    }

    INFO="Unknown LAB_MODE"
    case $LAB_MODE in
        Terraform)
            #__TF_VERSION=$( which terraform >/dev/null && terraform --version || echo No terraform )
            __TF_VERSION=$( which terraform >/dev/null && terraform version -json | jq -rc '.terraform_version' || echo missing )
            # terraform version | awk '/^Terraform / { print $2; }'
            INFO="terraform $__TF_VERSION"
            TITLE_MODE+="_$__TF_VERSION"
            ;;
        Docker)
            if which docker >/dev/null; then
                #INFO=$( echo "docker"; docker version --format '{{.Server.Version}}' | grep -A 1 Engine | awk '/ Version:/ { print $2; }' )
                #set -x; docker version --format '{{.Server.Version}}'; set +x
                INFO=$( docker version --format '{{.Server.Version}}' | grep -A 1 Engine | awk '/ Version:/ { print $2; }' )
                TITLE_MODE+="_$INFO"
            else
                echo "************ NO DOCKER ***************"
                INFO="No-Docker"
            fi
            ;;
        Kubernetes)
            # Short term as --short will be deprecated:
            K8S_VERSION=$( which kubectl >/dev/null && kubectl version --short 2>/dev/null || echo No kubectl )
            # Later:
            # K8S_VERSION=$( which kubectl >/dev/null && kubectl version 2>/dev/null || echo No kubectl )
            INFO=$K8S_VERSION
            TITLE_MODE+="_$K8S_VERSION"
            ;;
    esac
                  
    echo "# Notebook initial generation:"
    echo "# - $(date +'%Y-%b-%d %0Hh%0Mm'):[$ENVIRONMENT] node ${HOSTNAME}["$INFO"]"
    [ ! -z "$REPO" ] && echo "git repo ${REPO} last commit ${DATE}: ${SHA}"
    return 0
}

__FN_k8s_SETUP() {
    [ ! -z "$_SETUP_RUN" ] && return 0
    export _SETUP_RUN=$(date)

    # Jupyter on Ubuntu, or in kubelab:
    [ $(id -un) = "root" ] && export HOME=/root
    ## [ -f /root/.profile ]         && . /root/.profile
    ## [ -f /root/.jupyter.profile ] && . /root/.jupyter.profile
    export PATH=~/bin:$PATH
    #### ls -altr ~/
    kubectl get pods

    echo "$(kubectl get nodes master -o custom-columns=IP:.status.addresses[0].address --no-headers) master" >> /etc/hosts
    echo "$(kubectl get nodes worker1 -o custom-columns=IP:.status.addresses[0].address --no-headers) worker1" >> /etc/hosts

    echo
    echo "/etc/hosts inside kubelab Pod:"
    cat /etc/hosts

    typeset -f > $FN_1_LIST
    ALL_ADD_FNS=$(diff $FN_0_LIST_ORIG $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
    [ ! -z "$ALL_ADD_FNS" ] && echo "All added functions: $ALL_ADD_FNS"
    [ "$FN_0_LIST_ORIG" != "$FN_0_LIST" ] && {
        NEW_ADD_FNS=$(diff $FN_0_LIST $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
        [ ! -z "$NEW_ADD_FNS" ] && echo "New functions: $NEW_ADD_FNS"
    }
}

# NOTEBOOK  FUNCTIONS: ------------------------------------------------

# SET_FRONTMATTER:

SET_FRONTMATTER() {
    local __TITLE="$1"; shift
    local __WEIGHT="$1"; shift

    #local __DATE=$(date)
    #local __DATE=$(date  --iso-8601=seconds)
    local __DATE=$(date +%s)
    #date: 2018-11-28T15:14:39+10:00

    read -r -d '' FRONTMATTER <<EOF
---
title:  $__TITLE
date:   $__DATE
weight: $__WEIGHT
---

EOF
}

REPLACE_HOME_STDIN() {
    sed -e "s?${HOME}/?~/?g"
}

ARCHIVE_SOLUTIONS() {
    LAB_NAME="$*"

set -x
    LAB_NUM=$( echo $LAB_NAME | sed -e 's/^lab//i' -e 's/ .*//' -e 's/\..*//' )
set +x
    #echo "LAB_NUM='$LAB_NUM'"

    mkdir -p ~/Solutions/BAK
    SOLUTION_DIR=~/Solutions/Lab${LAB_NUM}
    [ -d $SOLUTION_DIR ] && mv $SOLUTION_DIR ~/Solutions/BAK 2>/dev/null

    mkdir -p $SOLUTION_DIR
    cp -a *.yml *.yaml *.tf *.tfvars *.json $SOLUTION_DIR/ 2>/dev/null
}

#
# Perform nbtool.py processing
# - filters out '#EXCLUDE' cells
# - filters out SET_VARS cells, but picks up VAR values
# - replaces VAR values in cells
# - TODO: Create ToC (Table of Contents) and links to Next section
# - TODO: Autonumber sections/subsections
#
__QUIET() {
    # Quiet except on failure --> __FILTER
    pwd
    __FN_QUIET_FILTER_NOTEBOOK $* || __FILTER
}
__FILTER() {
    pwd
    __FN_FILTER_NOTEBOOK $*
}

__FN_QUIET_FILTER_NOTEBOOK() {
    #ls -altrd $NB_DIR/README.md $NB_DIR/${NAME}.ipynb  | __FN_COLOUR green
    #( cd $NB_DIR; ls -altrd README.md ${NAME}.ipynb  | __FN_COLOUR green; )
    #( cd $NB_DIR; ls -altrd README.md *.ipynb  | __FN_COLOUR green; )
    pwd
    __FN_FILTER_NOTEBOOK $* > ~/tmp/quiet.filter.notebook.op 2>&1
    __CHECK_NB_DIR
    ( cd $NB_DIR;
      ls -altrd README.md *.ipynb | tail -2 | __FN_COLOUR green;

      R_NB=README.ipynb
      TOTAL_CELLS=$(jq -rc '.cells    | length' $R_NB )
      CODE_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="code")) ' $R_NB)
      MD_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="markdown")) ' $R_NB)
      printf "%-30s: %3d cells [ %2d code + %2d markdown ]\n" ${R_NB} $TOTAL_CELLS $CODE_CELLS $MD_CELLS

      R_NB=$( ls -1tr *.ipynb | grep -v README | tail -1)
      TOTAL_CELLS=$(jq -rc '.cells    | length' $R_NB )
      CODE_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="code")) ' $R_NB)
      MD_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="markdown")) ' $R_NB)
      printf "%-30s: %3d cells [ %2d code + %2d markdown ]\n" ${R_NB} $TOTAL_CELLS $CODE_CELLS $MD_CELLS
    )
    __RETURN 0
}

__CHECK_NB_DIR() {
    [ -z "$NB_DIR" ] && NB_DIR=$(cat .dir)
    [ -z "$NB_DIR" ] && DIE "NB_DIR is unset"
    env | grep ^NB_DIR= || DIE "NB_DIR is not exported"
    echo "NB_DIR='$NB_DIR'"
}

__FN_FILTER_NOTEBOOK() {
    NOTEBOOK="$1"
    [ -z "$NOTEBOOK" ] && NOTEBOOK=README.ipynb
    export NOTEBOOK

    __CHECK_NB_DIR
    ( cd $NB_DIR;
    
    echo
    echo "======== Filtering current notebook [$NOTEBOOK] ========"
    echo "**** $(date): Notebook filtered on ${HOSTNAME} ${ENVIRONMENT}"; echo

    ARCHIVE_SOLUTIONS $LAB_NAME

    # Re-source latest version:
    echo "-- source $NBTOOL_FN" | REPLACE_HOME_STDIN
    [ -z "$NBTOOL_FN" ] && DIE "NBTOOL_FN is unset"
    source $NBTOOL_FN

    # In kubelab:
    # Jupyter on Ubuntu, or in kubelab:
    export PATH=~/.venv/jupyter_bash/bin:$PATH
    which python3
    PYTHON3=$(which python3 || echo /opt/conda/bin/python3)

    echo; echo "======== FILTERING NOTEBOOK ===================================================="
    CMD="$PYTHON3 $NBTOOL_PY -f $NOTEBOOK"
    echo; echo "-- $CMD" | REPLACE_HOME_STDIN
    $CMD
    echo "======== FILTERING DONE ========================================================"; echo
    __CHECK_NB_DIR

    OP_NOTEBOOK=$(ls -1tr $NB_DIR/ | grep filtered.ipynb$ | tail -1)
    [ -z "$OP_NOTEBOOK" ] && {
        which python3
        echo "[$PWD] Error: failed to find filtered README*.ipynb in directory '$NB_DIR'"
        ls -1tr $NB_DIR/ | grep .ipynb$ | REPLACE_HOME_STDIN | sed 's/^/::/'
        exit 1
    }

    # Attempt line-wrapped cells:
    #   based on https://medium.com/znippet/adding-word-wrap-to-jupyter-notebooks-97040d131784
    OP_NOTEBOOK_LINEWRAPPED=${OP_NOTEBOOK%.ipynb}.LineWrapped.ipynb
    jq '. + { "MarkdownCell": { "cm_config": { "lineWrapping": true } }, "CodeCell": { "cm_config": { "lineWrapping": true } } }' \
        ${OP_NOTEBOOK} > ${OP_NOTEBOOK_LINEWRAPPED}

    ls -altr $OP_NOTEBOOK
    ls -altr $OP_NOTEBOOK| REPLACE_HOME_STDIN

    # Detect visibility of EXCLUDE/FN_EXCL in output (even if "# EXCLUDE" rather than "#EXCLUDE"):
    echo "Checking for 'EXCLUDE|FN_EXCL' in filtered notebook"
    grep -qE "EXCLUDE|FN_EXCL" $OP_NOTEBOOK && {
        echo; echo "---- Error: EXCLUDE/FN_EXCL seen in $OP_NOTEBOOK:"
        echo "Occurrences of EXCLUDE in $OP_NOTEBOOK:" $( grep -o EXCLUDE $OP_NOTEBOOK | wc -l )
        #grep EXCLUDE $OP_NOTEBOOK | __FN_HIGHLIGHT_MATCH EXCLUDE
        echo "Occurrences of FN_EXCL in $OP_NOTEBOOK:" $( grep -o FN_EXCL $OP_NOTEBOOK | wc -l )
        #grep FN_EXCL $OP_NOTEBOOK | __FN_HIGHLIGHT_MATCH FN_EXCL

        JUPYTEXT=$( which jupytext )
        echo "JUPYTEXT='$JUPYTEXT'"
        if [ -x "$JUPYTEXT" ]; then
            #jupytext --to sh:percent README.ipynb
            jupytext --to sh:percent $OP_NOTEBOOK # filtered
            grep -nE -A 5 "EXCLUDE|FN_EXCL" ${OP_NOTEBOOK%.ipynb}.sh # filtered
        fi

        ls -altr README.ipynb  README.sh
        echo "-------------------------------------------------"
    }

    echo "Checks specific to TF/K8S:"
    __TF_OK="TF_DATA_DIR|__TF_VAR_|__TF_INPUT|__TF_CLI|__TF_CLI_ARG|__TF_LOG"
    grep "__TF_"  $OP_NOTEBOOK | grep -vE $__TF_OK | __FN_HIGHLIGHT_MATCH __TF_
    grep "K_"  $OP_NOTEBOOK | __FN_HIGHLIGHT_MATCH K_

    S_NB=$( echo $NOTEBOOK | REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in i/p file"
    } || {
        echo; echo "$NUM VAR defs/usages in i/p file: $S_NB"
        # jq '.' $NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __
        # DIE "Can't continue"
    }

    S_OP_NB=$( echo $OP_NOTEBOOK | REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in o/p file"
    } || {
        echo; echo "Error: $NUM VAR defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __ | __FN_HIGHLIGHT
        #DIE "Can't continue"
    }

    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c '${__' )
    [ "$NUM" != "0" ] && {
        echo; echo "Error: $NUM \${__XX} defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n '${__' | __FN_HIGHLIGHT
        #DIE "Can't continue"
    }

    echo "Performing __FN_NBCONVERT"
    [ "$NOTEBOOK" = "${NOTEBOOK##*TEST}" ] && __FN_NBCONVERT
    )

    return 0
}

__FN_NBCONVERT() {
    __CHECK_NB_DIR
   (
        cd $NB_DIR;

        # TODO after nbconvert ??
        # ansi highlighting => strip output and add as separate html
        #   command | TREAT_OUTPUT
        #   command | TREAT_OUTPUT yaml

        CMD="jupyter-nbconvert --to markdown $OP_NOTEBOOK"
        echo; echo "-- $CMD"; $CMD
        CMD="jupyter-nbconvert --to html $OP_NOTEBOOK"
        echo; echo "-- $CMD"; $CMD

        echo "$FRONTMATTER"           > README.md
        OP_NOTEBOOK_MD=${OP_NOTEBOOK%.ipynb}.md
        sed \
            -e 's?\.\./\.\./\.\./static/images/?/images/?' \
            -e 's?\.\./images/?/images/?' \
            $OP_NOTEBOOK_MD >> README.md
        #cat $OP_NOTEBOOK_MD >> README.md
        mv     $OP_NOTEBOOK_MD ${OP_NOTEBOOK_MD}.bak
        cp -a  $OP_NOTEBOOK ${OP_NOTEBOOK}.bak

        #echo; ls -altr *.md | __FN_COLOUR green

        #TEST: cp /dev/null $OP_NOTEBOOK
        #echo
        CHECK_FILE_SIZE $OP_NOTEBOOK 1000 || {
            #ls -altr $OP_NOTEBOOK
            DIE "File $OP_NOTEBOOK is too small - supsicious"
        }

        NUM_LONG_LINES=$( SHOW_LONG_LINES -m $MAX_LEN_MD README.md | wc -l )
        if [ "$NUM_LONG_LINES" != "0" ]; then
            echo
            echo "---- $NUM_LONG_LINES long lines (> $MAX_LEN_MD) in README.md:"
            #SHOW_LONG_LINES -m $MAX_LEN_MD README.md | __FN_COLOUR red
        fi

        #cp /dev/null README.md
        #echo
        CHECK_FILE_SIZE README.md 1000 || {
            #ls -altr README.md
            DIE "File README.md is too small - supsicious"
        }

        # Sanitize notebook/markdown filename:
        NAME=$( echo $LAB_NAME | sed -e 's/  */_/g' -e 's/_-_/-/g' -e 's/\._/\./' )
        mv $OP_NOTEBOOK ${NAME}.ipynb

        ## Remove leading spaces from markdown file:
        #  Disabled - messes up output cells under Hugo (no black background)
        #sed 's/^  *//' README.md > ${NAME}.md
        #rm README.md
        #mv README.md ${NAME}.md

        # FILTER_OK_CHECK:
        #echo; ls -altr README.md  | __FN_COLOUR green
        #echo; ls -altr ${NAME}.*  | __FN_COLOUR green
        echo; ls -altr README.md ${NAME}.*  | __FN_COLOUR green
        #ls -altr *.md
    )
}

# Special   FUNCTIONS: ------------------------------------------------

# at line level:
# - EXEC    command: implemented here and in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 
#
# - NO_EXEC command: implemented here and in nbtools.py
#       => don't execute in orig     notebook, 
#       =>       execute in filtered notebook, 
#
# at cell level:
# - command # EXCLUDE: implemented in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 

# Don't perform this step, but filtering will still leave the command in code cell
# TODO: implement this in nbtool.py (just remove NO_EXEC)_
# e.g. use as
#     NO_EXEC . ~/.bashrc
# CODE: nbtool.py will replace source_line by first line of output text (which is then removed from output_text)
# - useful when command is a variable
# e.g. code cell contents are:  (output set to actual value of $__CMD)
#    CODE $__CMD # Must be first line in code cell
#    EXEC $__CMD
CODE()                    { echo $*;                            return 0;  }
NO_EXEC()                 {                                     return 0;  }
EXEC()                    { $*;                                 return $?; }

# __* FUNCTIONS: ------------------------------------------------

# Terraform-specific:
__TF_INIT() {
    __NB_DEBUG terraform init $*
    terraform init $*
    __RETURN
}

__TF_PLAN() {
    __NB_DEBUG terraform plan $*
    #__RETURN
    TIME=""
    local QUIET=0

    [ -z "$1"     ] && TIME="time "
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    [ "$1" = "-q" ] && { QUIET=1; shift; }
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    TIME=""; __TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terraform plan $* |
            tee /tmp/PLAN.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}terraform plan $*
    fi
    __NB_DEBUG $( __TIMER_STOP 'terraform plan' )
    __RETURN
}

__TF_APPLY() {
    TIME=""
    local QUIET=0
    __NB_DEBUG terraform apply $*

    [ -z "$1"     ] && TIME="time "
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    [ "$1" = "-q" ] && { QUIET=1; shift; }
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    TIME=""; __TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terraform apply -auto-approve $* |
            tee /tmp/APPLY.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}terraform apply -auto-approve $*
    fi
    __NB_DEBUG $( __TIMER_STOP 'terraform apply' )
    __RETURN
}

____TF_DESTROY() {
    __TF_DESTROY $*
}

__TF_DESTROY() {
    TIME=""
    local QUIET=0
    __NB_DEBUG terraform destroy $*

    [ -z "$1"     ] && TIME="time "
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    [ "$1" = "-q" ] && { QUIET=1; shift; }
    [ "$1" = "-t" ] && { TIME="time "; shift; }
    TIME=""; __TIMER_START

    if [ $QUIET -ne 0 ]; then
        ${TIME}terraform destroy -auto-approve $* |
            tee /tmp/DESTROY.op |& grep -iE "complet|fail|error| to add"
    else
        ${TIME}terraform destroy -auto-approve $*
    fi
    __NB_DEBUG $( __TIMER_STOP 'terraform destroy' )
    __RETURN
}

__DOCKER() {
    # In nbtools.py replace by "ssh vm-linux-docker docker $*"
    __NB_DEBUG docker $*
    docker $*
    __RETURN
}

__CURL() {
    # In nbtools.py replace by "ssh vm-linux-docker docker $*"
    __NB_DEBUG curl $*
    curl $*
    __RETURN
}

# Kubernetes-specific:
__K_GET() {
    kubectl get $*
    # TODO: If kubectl get svc, get service => recuperate IP, PORT info
    # TODO: If kubectl get po, get pod      => recuperate IP, PORT info
}

__K_CREATE() {
    kubectl create $*
    # TODO: If kubectl create svc, create service => recuperate IP, PORT info
    # TODO: If kubectl create dep, create deploy  => recuperate IP, PORT info
    # TODO: If kubectl run                        => recuperate IP, PORT info
    # Check in YAML ?!
    #if [ "$1" = "pod" ]; then
    #fi

    # TODO:
    # Create deploy - wait for Pods ready? ==> NO use WAIT_PODS function
}

# Hide stdin elements matching arguments,
# e.g. use as
#      ls | __HIDE hidden_files

__FN_HIDE()            { grep -v $* ;                        return 0; }

__FN_HIGHLIGHT()       { grep --color=always -E "|.*${*}.*"; return 0; }
__FN_HIGHLIGHT_EOL()   { grep --color=always -E "|${*}.*";   return 0; }
__FN_HIGHLIGHT_SOL()   { grep --color=always -E "|.*${*}";   return 0; }
__FN_HIGHLIGHT_MATCH() { grep --color=always -E "${*}";    return 0; }

#echo HELLO WORLD from Jupyter | __HIGHLIGHT WORLD
#echo HELLO WORLD from Jupyter | __HIGHLIGHT_EOL WORLD
#echo HELLO WORLD from Jupyter | __HIGHLIGHT_SOL WORLD

# VARIABLE  FUNCTIONS: ------------------------------------------------

SET_VAR() {
    local VARNAME=$1; shift

    [ "${VARNAME#*=}" != "$VARNAME" ] && {
        echo "SET_VAR: Correcting VARNAME '$VARNAME' to '${VARNAME%%=*}'"
        local ARGS="${VARNAME#*=}"
        VARNAME=${VARNAME%%=*}
        #set -- ${VARNAME#*=}
        set -- $ARGS
        echo "Setting args to $*"
        #echo "Leaving args as $*"
    }

    [ "${VARNAME#__}" = "$VARNAME" ] && {
        echo "SET_VAR: Correcting var name '$VARNAME' to '__$VARNAME'"
        VARNAME=__$VARNAME
    }

    # Output variables so they will be seen by nbtool.py:
    local VALUE="$*"
    echo $VALUE | grep -q $HOME && {
        VALUE=$(echo $VALUE | sed -e "s?$HOME?~?g")
    }
    eval $VARNAME="$VALUE"
    #echo "VAR $VARNAME='$VALUE'"
    echo "VAR $VARNAME=\"$VALUE\""
}

# Usage:
# SET_VAR_LAST_FILE args
SET_VAR_LAST_FILE() {
    __LAST_FILE=$(ls -1tr . | tail -1)
    echo VAR __LAST_FILE=$__LAST_FILE
    return 0
}

SET_NAMESPACE() {
    local __NS_ARG="$1"; 

    [ ! -z "$__NS_ARG" ] && { NS=$__NS_ARG; return; }

    # Note: --minify removes all output not used by the current context from the output
    local __NS=$(kubectl config view --minify -o 'jsonpath={..namespace}')

    [ ! -z "$__NS" ] && { NS=$__NS; return; }

    # If __NS is unset then default is the namespace:
    NS="default"
}

K_GET_SVC() {
    [ "$1" = "-n" ] && { NS=$2; shift; shift; }
    #SET_NAMESPACE

    kubectl -n $NS get svc $*
    SET_VAR_SVC_IP $1 "$NS"
    SET_VAR_SVC_PORT $1 "$NS"
    SET_VAR_SVC_EXTIP $1 "$NS"
}

K_GET_PODS() {
    [ "$1" = "-n" ] && { NS=$2; shift; shift; }
    #SET_NAMESPACE
    POD_NAME=$1;

    #kubectl get pod $*
    kubectl -n $NS get pod | grep " $POD_NAME"
    SET_VAR_POD_IPS  $POD_NAME   $NS
    SET_VAR_POD_NAME $POD_NAME 1 $NS
}

# Usage: SET_VAR_POD_IPS -n <ns> podname
# curl -sL http://$__POD_IPS
SET_VAR_POD_IPS() {
    #set -x
    POD_NAME="$1"
    SET_NAMESPACE "$2"
    
    #POD_IP=$(kubectl -n $NS get pods "$POD_NAME" -o custom-columns=NAME:.status.podIP --no-headers)
    __POD_IPS=$(kubectl -n "$NS" get pods -o wide | awk "/^$POD_NAME/ { print \$6; }")
    # WHY FAILING??
    #   __POD_IP=${__POD_IPS%% *}
    #   __POD_IP=$( echo "${__POD_IPS}" | awk '{ print $1; }')
    #   __POD_IP=$( echo "${__POD_IPS}" | sed 's/\([0-9,.]*\).*/X\1/' )
    __POD_IP=$(kubectl -n "$NS" get pods -o wide | awk "/^$POD_NAME/ { print \$6; exit(0); }")
    echo VAR __POD_IP=$__POD_IP
    echo VAR __POD_IPS=$__POD_IPS
    return 0
}

SET_VAR_SVC_IP() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_IP=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=IP:.spec.clusterIP --no-headers)
    echo VAR __SVC_IP=$__SVC_IP
    return 0
}

SET_VAR_SVC_EXTIP() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_EXTIP=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=IP:.spec.externalIPs[0] --no-headers)
    echo VAR __SVC_EXTIP=$__SVC_EXTIP
    return 0
}

SET_VAR_SVC_PORT() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_PORT=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=NP:.spec.ports[0].nodePort --no-headers)
    echo VAR __SVC_PORT=$__SVC_PORT
    return 0
}

SET_VAR_NODE_IP() {
    __NODE_NAME="$1"
    SET_NAMESPACE "$2"
    
    __NODE_IP=$(kubectl get node "$__NODE_NAME" -o custom-columns=IP:.status.addresses[0].address --no-headers)
    echo VAR __NODE_IP=$__NODE_IP
    return 0
}

SET_VAR_IDX() {
    VAR_NAME=$1; shift
    IDX=$1;      shift

    NEW_VAR_NAME=${VAR_NAME%S}
    #NEW_VAR_NAME=${NEW_VAR_NAME%S}
    
    eval VALUE="\$$VAR_NAME"
    echo VALUE=$VALUE
    while [ $IDX -gt 1 ]; do
        echo "[$IDX] VALUE=$VALUE"
        VALUE=${VALUE#* }
        let IDX=IDX-1
    done
    VALUE=${VALUE%% *}
    echo eval $NEW_VAR_NAME=$VALUE
    eval $NEW_VAR_NAME="$VALUE"
    return 0
}

FOREACH() {
    __VAR_NAME=$1; shift
    #echo "\$*=$*"
           
    __VAR_NAME_s="${__VAR_NAME}S"
    #echo "__VAR_NAME_s=$__VAR_NAME_s"
    #echo "__POD_IPS=$__POD_IPS"
    eval __VALUES="\$$__VAR_NAME_s"
    #echo "__VALUES=$__VALUES"
    
    for __VALUE in $__VALUES; do
        eval $__VAR_NAME=$__VALUE
        #echo
        #echo "__POD_IP=$__POD_IP"
        #echo "\$*=$*"
        eval $*
    done
    return 0
}

TEST_VAR_FUNCTIONS() {
    #SET_VAR_POD_IPS k8s-demo
    SET_VAR_POD_IPS kube-system coredns
    echo $__POD_IPS

    SET_VAR_SVC_IP kubernetes
    echo $__SVC_IP

    SET_VAR_SVC_PORT k8s-demo-np
    echo $__SVC_PORT

    #__POD_IPS="1.a.b.c.d 2.A.B.C.E 3.a.B.c.F 4.4 5.5 6.6 7.7 8.8"
    #SET_VAR_IDX __POD_IPS 3
    #echo $__POD_IP

    SET_VAR_NODE_IP master
    echo $__NODE_IP

    FOREACH __POD_IP echo "POD_IP=\$__POD_IP"
}

SET_VAR_POD_NAME() {
    local PODNAME_MATCH=$1; shift;
    local POD_IDX=1;
    [ ! -z "$1" ] && { POD_IDX=$1; shift; }
    SET_NAMESPACE "$1"
    __POD_NAME=$(kubectl -n $NS get pods --no-headers | grep $PODNAME_MATCH | head -$POD_IDX | tail -1 | awk '{ print $1; }')
    echo VAR __POD_NAME=$__POD_NAME
}

# WAIT ON EXEC FUNCTIONS: ---------------------------------------------

__FN_WAIT() { sleep $1; cat; return 0; }

# Sleep and cell will be excluded
__FN_WAIT() {
    sleep $1;
    return 0
}

__FN_WAIT_CMD() {
    #set -x
    echo $* >/tmp/WAIT_CMD
    
    while ! eval "$*" >>/tmp/WAIT_CMD 2>&1; do
        #echo looping ...
        sleep 1
    done
    return 0
}

### --- TODO ----------------------
### Use kubectl wait
# - In scripts use kubectl wait: kubectl wait --for=condition=available --timeout=60s --all deployments
# 
# See - https://mrkaran.dev/posts/kubectl-wait/

# Waits for at least 1 Pod to be in state (default: Running)

__FN_WAIT_PODS() {
    if [ "$1" = "-n" ]; then
        shift; SET_NAMESPACE $1; shift
    else
        SET_NAMESPACE
    fi

    POD_MATCH=$1; shift
    STATE=""
        
    [ ! -z "$1" ] && STATE=$1
    if [ -z "$STATE" ];then
        #echo WAIT_PODS -n $NS $POD_MATCH "(ContainerCreating|Running)"
        #WAIT_PODS -n $NS $POD_MATCH "(ContainerCreating|Running)"
        WAIT_PODS -n $NS $POD_MATCH "Running"
        return 0
    fi

    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for '$POD_MATCH' Pods to start ..."
    while ! kubectl -n $NS get pods | grep -q $POD_MATCH; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo

    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for at least 1 '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    while ! kubectl -n $NS get pods |& grep $POD_MATCH | grep -qE " $STATE "; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo
    
    #### # NEEDS TESTING:
    #### # All in same state:
    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for all '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    while kubectl -n $NS get pods | grep $POD_MATCH | grep -vq " $STATE "; do
    #while ! kubectl -n $NS get pods | grep $POD_MATCH | grep -vq " $STATE "; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    return 0
}

# Note: would be useful a function which waits for *all* matching Pods to be running
__FN_WAIT_ALL_PODS_RUNNING() {
    local NS=""
    if [ "$1" = "-n" ]; then
        NS="-n $2"
    fi

    WAIT_SLEEP=2
    while kubectl $NS get pods --no-headers | grep -vq Running; do sleep $WAIT_SLEEP; done
}

__FN_WAIT_NO_PODS() {
    if [ "$1" = "-n" ]; then
        shift; SET_NAMESPACE $1; shift
    else
        SET_NAMESPACE
    fi

    if [ -z "$1" ]; then
        while ! kubectl -n $NS get pods |& grep -q "No resources"; do
            [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
            [ $DEBUG_WAIT -ne 0 ] && echo .
            sleep $WAIT_SLEEP
        done
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
        [ $DEBUG_WAIT -ne 0 ] && echo
        return
    fi

    POD_MATCH=$1; shift
    STATE=""
    
    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for '$POD_MATCH' Pods to terminate ..."
    while kubectl -n $NS get pods |& grep -q $POD_MATCH; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo
    return 0
}

#set +x
#WAIT 1
#WAIT_CMD [ -f /tmp/OK ]
#WAIT_PODS quiz
#WAIT_PODS quiz
#WAIT_PODS quiz "ContainerCreating|Running"

# EXCLUDE CELL FUNCTIONS: ---------------------------------------------

# __CLEANUP      FUNCTIONS: ---------------------------------------------

__FN_CLEANUP_TRAEFIK() {
    kubectl -n kube-system delete deploy/traefik-ingress-controller
    kubectl -n kube-system delete svc traefik-ingress-service
    kubectl -n kube-system delete sa/traefik-ingress-controller
    kubectl delete clusterrolebinding/traefik-ingress-controller
    kubectl delete clusterrole/traefik-ingress-controller
    kubectl -n kube-system delete sa/traefik-ingress-controller
}

__FN_CLEANUP() {
    SET_NAMESPACE "$1"
    echo
    echo "======== CLEANUP namespace($NS) ==========================="
    #kubectl get ns
    #kubectl delete ns frontend
    echo -n "Deployments: "
    kubectl -n $NS delete deploy --all
    echo -n "Services:    "
    kubectl -n $NS delete service --all
    sleep 2
    echo -n "Pods:        "
    kubectl -n $NS delete pods --all

    #kubectl taint node master node-role.kubernetes.io/master:NoSchedule
    echo
    echo "======== Remaining pods across all namespaces ==========================="
    kubectl get pods -A
    WAIT_NO_PODS
}

__FN_CLEANUP_TRAEFIK() {
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml
}

__FN_NODES_CHECK() {
    kubectl get node
    kubectl describe node | grep Pressure | grep True
}

# OTHER MISC   FUNCTIONS: ---------------------------------------------

__RETURN() {
    [ -z "$1" ] && return 0
    return $1
}

# SETUP SECTION -------------------------------------------------------

#### __k8s_SETUP

# OTHER NOTES   -------------------------------------------------------

# See kubectl wait remarks above
# kubectl api-resources

