# Max number of chars/line to allow in markdown output:
# MAX_LEN_MD=110
# In practice 74 seems to be a good limit for the PDF output (tested using Safari/macOS):
MAX_LEN_MD=74

# Default for SSH functions
SSH_NODE=worker

function SSH_SET {
    SSH_NODE=$1
}

function SSH {
    #ssh -qt $SSH_NODE $*
    ssh -q $SSH_NODE $*
}

ENVIRONMENT="** NO ~/.environment **"

function NB_SET_ENV {
    [ -f ~/.environment ] && ENVIRONMENT=$( head -1 ~/.environment )
}

#echo "$ENVIRONMENT $( ls -al ~/.environment 2>/dev/null)"

which banner >/dev/null && {
    #sudo apt install -y sysvbanner
    function banner { echo "BANNER: $*"; }
}

HOSTNAME=$(hostname)

function NB_DEBUG {
    local INFO="${PWD##*/} $(date +'%Y-%b-%d %0Hh%0Mm')"
    echo "NB_DEBUG: $INFO"
    echo "NB_DEBUG: $(id -un)@$(hostname):$PWD"
    echo "NB_DEBUG: -- $*"
}

function NB_SHOW_LONG_LINES {
    local IPFILE=""
    local MAX_LINE_LEN=80
    local LEFT_COLS=7

    while [ ! -z "$1" ]; do
        case $1 in
            -m) shift; MAX_LINE_LEN=$1;;
             *) IPFILE=$1;;
        esac
        shift
    done

    let MAX=MAX_LINE_LEN+LEFT_COLS

    # CAT input file with line numbers:
    # - if/cat: cat input file or stdin, with line numbers
    #           also sanitize output (control chars can mess up terminal colours)
    # - cut: select first columns with line number and columns after MAX_LINE_LEN chars
    # - grep: Remove lines with no extra chars (after column 80 of input file)
    #         By detecting lines with initial spaces, line number and then a TAB then end of line

    if [ ! -z "$IPFILE" ]; then
        cat -vn $IPFILE
    else
        cat -vn
    fi |
        cut -c 1-${LEFT_COLS},${MAX}-5000 |
        grep -v "^ *[0-9]*"$'\t'"$"
}

function NB_RUN {
    echo "+ $@" >&2
    if [ "$1" = "opa" ]; then
        eval "$@" | OPA_OP
    else
        eval "$@"
    fi
    #$@
}

function __NB_FILE_COMMON {
    APPEND=0
    [ "$1" = "-a" ] && { APPEND=1; shift; }
    FILE=$1; shift
    # Assume no '/' in FILE:
    ## MD_FILE=".md.${FILE}"

    #cat >$FILE
    # Replace $STUDENT by it's value: also needs to be done in nbtool.py

    [ ! -d ~/tmp ] && mkdir -p ~/tmp

    sed -e "s/\$STUDENT/$STUDENT/g" -e "s/\${STUDENT}/${STUDENT}/g" > ~/tmp/file.$$

    grep -v ">>tomark:" ~/tmp/file.$$ | sed 's/>>tofile://g' |
       if [ $APPEND -eq 0 ]; then
          cat >$FILE
       else
          cat >>$FILE
       fi

    ## grep -v ">>tofile:" ~/tmp/file.$$ | sed 's/>>tomark://g' |
       ## if [ $APPEND -eq 0 ]; then
          ## cat >$MD_FILE
       ## else
          ## cat >>$MD_FILE
       ## fi

    rm ~/tmp/file.$$

    ls -al $FILE >> $LOG
}

function NB_FILE {
    #set -x
    # NOTE: nbtool.py to replace this code_cell with markdown cell to say create a file with these contents
    FILE="$1"; shift
    local LOG=/tmp/__FILE

    echo "[$PWD] Writing to new file '$FILE'" >$LOG
    __NB_FILE_COMMON $FILE
}

function NB_FILE_A {
    # NOTE: nbtool.py to replace this code_cell with markdown cell to say append file with these contents
    FILE="$1"; shift
    local LOG=/tmp/__FILE_A

    echo "[$PWD] Appending to file '$FILE'" >$LOG
    __NB_FILE_COMMON -a $FILE
}

#function NB_COLOUR { grep --color always ''; }
#function NB_COLOUR { sed -e 's/^/\\01b[1;34m/' -e 's/$/\\01b[0m/'; }

function NB_COLOUR {
    # #  NORMAL;           BOLD;                 INVERSE;
    # _black='\e[00;30m';  _L_black='\e[01;30m';  _I_black='\e[07;30m'
    # _white='\e[00;37m';  _L_white='\e[01;37m';  _I_white='\e[07;37m'
    # _red='\e[00;31m';    _L_red='\e[01;31m';    _I_red='\e[07;31m'
    # _green='\e[00;32m';  _L_green='\e[01;32m'   _I_green='\e[07;32m'
    # _yellow='\e[00;33m'; _L_yellow='\e[01;33m'  _I_yellow='\e[07;33m'
    # _blue='\e[00;34m'    _L_blue='\e[01;34m'    _I_blue='\e[07;34m'
    # _magenta='\e[00;35m' _L_magenta='\e[01;35m' _I_magenta='\e[07;35m'
    # _cyan='\e[00;36m'    _L_cyan='\e[01;36m'    _I_cyan='\e[07;36m'

    case "$1" in
        red)       sed "s,.*,\x1B[31m&\x1B[0m,";;
        boldgreen) sed "s,.*,\x1B[01;32m&\x1B[0m,";;
        green)     sed "s,.*,\x1B[32m&\x1B[0m,";;
        yellow)    sed "s,.*,\x1B[33m&\x1B[0m,";;
        blue)      sed "s,.*,\x1B[34m&\x1B[0m,";;

        *)         sed "s,.*,\x1B[31m&\x1B[0m,";;
    esac
}

# STUFF TO DO: --------------------------------------------------------

# option to remove Nth argument  and comment
# e.g.
#    ls -al # STRIP_ARG 2 ==> 'ls'

# RECORD NEW FUNCTIONS: -----------------------------------------------

FN_0_LIST_ORIG=/tmp/nbtool.functions.0.list
FN_0_LIST=/tmp/nbtool.functions.0.list
FN_1_LIST=/tmp/nbtool.functions.1.list

if [ -f $FN_0_LIST ]; then
    FN_0_LIST=/tmp/nbtool.functions.0.rep.list
    FN_1_LIST=/tmp/nbtool.functions.1.rep.list
fi
typeset -f > $FN_0_LIST

# SETUP     FUNCTIONS: ------------------------------------------------
# Source .jupyer.profile, then demonstrate kubectl working:

function DIE {
    echo "[$PWD] die - $*" | NB_HIGHLIGHT
    env | grep -E "NBTOOL|LAB"
    exit 1
}

function NB_CHECK_FILE_SIZE {
    local FILE=$1; shift;
    local MIN_BYTES=$1; shift;

    #SIZE=$( stat -c %s $FILE )
    SIZE=$( wc -c < $FILE )
    [[ $SIZE -lt $MIN_BYTES ]] && {
        echo "File looks suspiciously small"
        ls -al $FILE 
        # Ignore if ALLOW_SMALL (needed for LFS458 Lab2):
        #grep ALLOW_SMALL $FILE ||
        grep ALLOW_SMALL ${LAB_IPYNB} ||
            return 1
    }
    return 0
}

# START: TIMER FUNCTIONS ================================================

function TIMER_START { START_S=`date +%s`; }

function TIMER_STOP {
    LABEL=""
    [ ! -z "$1" ] && LABEL="[$*]: "

    END_S=`date +%s`
    let TOOK=END_S-START_S

    TIMER_hhmmss $TOOK
    TIMER_STOP="${LABEL}Took $TOOK secs [${HRS}h${MINS}m${SECS}]"
    echo $TIMER_STOP
}

function TIMER_hhmmss {
    _REM_SECS=$1; shift

    let SECS=_REM_SECS%60
    let _REM_SECS=_REM_SECS-SECS
    let MINS=_REM_SECS/60%60
    let _REM_SECS=_REM_SECS-60*MINS
    let HRS=_REM_SECS/3600

    [ $SECS -lt 10 ] && SECS="0$SECS"
    [ $MINS -lt 10 ] && MINS="0$MINS"
}

# TIMER_START
# TIMER_STOP "Sleep test"

# END: TIMER FUNCTIONS ================================================

function NB_INIT_NOTEBOOK {
    #set -x
    NB=""
    if [ -z "$1" ]; then
        NB="${LAB_IPYNB}"
    else
        NB=$( basename "$1" )
    fi

    [ ! -f "$NB" ] && DIE "[$PWD] No such notebook as '$NB'"

    dpkg -l | grep -q "^ii jq " || {
       echo "==== sudo apt-get install -y jq"
       sudo apt-get install -y jq >/dev/null 2>&1
    }

    echo
    NB_SET_ENV
    echo "**** $(date): Notebook initialized on ${HOSTNAME} ${ENVIRONMENT}"; echo
    
    #set -x
    #set +x

    if [ -f ${LAB_IPYNB} ]; then
        if [ -f .dir ]; then
            # Detect moved dir with out of date ~/.dir
            [ "$PWD" != "$(cat .dir)" ] && DIE ".dir out of date";
            echo "Setting NB_DIR=$PWD"
            NB_DIR=$PWD
        else
            echo $PWD > .dir
        fi

        #echo "Setting NB_DIR=\$( cat $PWD/.dir )"
        #NB_DIR=$(cat .dir)
        export NB_DIR
        NB=$NB_DIR/$NB
        echo "NB_DIR=$NB_DIR" | NB_HIGHLIGHT
    fi

    # To be used in markdown front-matter, picked up by Hugo/Printing to give PDF filename ...
    TITLE_MODE=""
    case $LAB_MODE in
        Terraform)
            echo "-- source $NBTOOL_TF_FN"; source $NBTOOL_TF_FN
            TITLE_MODE="TF"
            rm -rf ~/tmp/terraform*
            echo; echo "==== Setting TF_DATA_DIR ===="
            export TF_DATA_DIR=~/dot.terraform
            echo "TF_DATA_DIR=$TF_DATA_DIR" | NB_HIGHLIGHT_EOL =
            if [ -f ~/.aws/linked/student20.rc ]; then
                env | grep MYAWS_ACCOUNT_NAME= | NB_HIGHLIGHT_EOL =
                echo; echo "==== Setting AWS vars for student20 account ===="
                . ~/.aws/linked/student20.rc; env | grep MYAWS_ACCOUNT_NAME= | NB_HIGHLIGHT_EOL =
                #env | grep AWS_LINKED_ACCOUNT= | NB_HIGHLIGHT_EOL =
                TITLE_MODE="TF-AWS"
            else
                echo; echo "==== No AWS vars ( ~/.aws/linked/student20.rc )"
            fi
            if [ -f ~/.student.rc ]; then
                env | grep MYAWS_ACCOUNT_NAME= | NB_HIGHLIGHT_EOL =
                echo; echo "==== Setting AZURE vars for student account ===="
                . ~/.student.rc;
                env | grep AZURE_CONFIG_DIR= | NB_HIGHLIGHT_EOL =
                env | grep ^ARM_.*=          | NB_HIGHLIGHT_EOL =
                TITLE_MODE="TF-AZ"
            else
                echo; echo "==== No AZURE vars ( ~/.student.rc )"
            fi
            ;;
        Docker)
            echo "-- source $NBTOOL_DO_FN"; source $NBTOOL_DO_FN
            TITLE_MODE="DO"
            echo "In Docker Mode"
            #exit 1
            ;;
        Kubernetes)
            echo "-- source $NBTOOL_K8_FN"; source $NBTOOL_K8_FN
            TITLE_MODE="K8S"
            [ -z "$KUBECONFIG" ] && export KUBECONFIG=~/.kube/config
            echo "KUBECONFIG='$KUBECONFIG'"
            KUBEOK=1
            [   -z "$KUBECONFIG" ] && KUBEOK=0
            [ ! -f "$KUBECONFIG" ] && KUBEOK=0
            which kubectl >/dev/null 2>&1 && KUBEOK=0
            if [ $KUBEOK -ne 0 ]; then
                grep current-context "$KUBECONFIG" | grep -q kubernetes-admin && echo "## ASSUMING full cluster admin rights"
                grep server: $KUBECONFIG
                kubectl get nodes
                kubectl config get-contexts
            fi
            ;;

        Rego)
            echo "-- source $NBTOOL_OPA_FN"; source $NBTOOL_OPA_FN
            TITLE_MODE="REGO"
            ;;

        *)
            echo "Error: Unknown LAB_MODE '$LAB_MODE' - should be one of 'Terraform|Kubernetes|Rego'" | NB_HIGHLIGHT
            banner ERR
            return
            ;;
    esac

    #rm -rf ~/labs
    #NO_EXEC echo SHOULD NOT BE SEEN | NB_HIGHLIGHT_SOL SHOULD
    #EXEC    echo SHOULD BE SEEN     | NB_HIGHLIGHT_SOL SHOULD

    #echo "LABTAG=$LAB_TAG" | NB_HIGHLIGHT_EOL =
    echo
    echo "======== $LAB_MODE Lab weight[$LAB_WEIGHT] / tag[$LAB_TAG] / name[$LAB_NAME] ========" | NB_HIGHLIGHT_EOL weight
    PDF_NAME=$( echo "$LAB_NAME" | sed -e 's/  */_/g' -e "s/^/${TITLE_MODE}_/" -e 's/_-_/-/g' )
    MD_SET_FRONTMATTER "$PDF_NAME" "$LAB_WEIGHT"

    echo "NB_DIR=$NB_DIR"
    echo "NB=$NB"
    NB_FILTER_NOTEBOOK $NB
}

function NB_LAB_ENV {
    #set -x
    local REPO=""
    local SHA=""
    local DATE=""
    git remote -v >/dev/null 2>&1 | grep -q origin && {
        REPO=$( git remote -v | awk '/fetch/ { print $2; exit; }' | sed -e 's?ssh://?https://?' )
        SHA=$( git log | awk '{ print $2; exit; }' )
        DATE=$( git log | grep -m1 ^Date: | sed -e 's/Date: *//' )
    }

    INFO="Unknown LAB_MODE"
    case $LAB_MODE in
        Terraform)
            #__TF_VERSION=$( which terraform >/dev/null && terraform --version || echo No terraform )
            __TF_VERSION=$( which terraform >/dev/null && terraform version -json | jq -rc '.terraform_version' || echo missing )
            # terraform version | awk '/^Terraform / { print $2; }'
            INFO="terraform $__TF_VERSION"
            TITLE_MODE+="_$__TF_VERSION"
            ;;
        Docker)
            if which docker >/dev/null; then
                INFO=$( docker version --format '{{.Server.Version}}' | grep -A 1 Engine | awk '/ Version:/ { print $2; }' )
                TITLE_MODE+="_$INFO"
            else
                echo "************ NO DOCKER ***************"
                INFO="No-Docker"
            fi
            ;;
        Rego)
            if which opa >/dev/null; then
                INFO=$( opa version | awk '/^Version: / { print $2; exit(0); }' )
                TITLE_MODE+="_opa_$INFO"
            else
                echo "************ NO OPA ***************"
                INFO="No-OPA"
            fi
            ;;
        Kubernetes)
            # Short term as --short will be deprecated:
            # K8S_VERSION=$( which kubectl >/dev/null && kubectl version --short 2>/dev/null || echo No kubectl )
            # K8S_VERSION=$( which kubectl >/dev/null && kubectl version 2>/dev/null || echo No kubectl )
            # K8S_VERSION=$( which kubectl >/dev/null && kubectl version 2>/dev/null | sed -e 's/.*Client Version: //' -e 's/ .*//' -e 's/Kustomize.*//'|| echo No kubectl )
            K8S_VERSION=$( which kubectl >/dev/null && 
 kubectl version -o json |& jq -rc '{ client: .clientVersion.gitVersion, server: .serverVersion.gitVersion } | values[]' |& sed -e '1s/^/Client /' -e '2s/^/Server /' )
            INFO=$K8S_VERSION
            TITLE_MODE+="_$K8S_VERSION"
            ;;
    esac
                  
    NB_SET_ENV
    echo "# Notebook initial generation:"
    echo "# - $(date +'%Y-%b-%d %0Hh%0Mm'):[$ENVIRONMENT] node ${HOSTNAME}["$INFO"]"
    [ ! -z "$REPO" ] && echo "git repo ${REPO} last commit ${DATE}: ${SHA}"
    return 0
}

# NOTEBOOK  FUNCTIONS: ------------------------------------------------

# MD_SET_FRONTMATTER:

function MD_SET_FRONTMATTER {
    local __TITLE="$1"; shift
    local __WEIGHT="$1"; shift

    #local __DATE=$(date)
    #local __DATE=$(date  --iso-8601=seconds)
    local __DATE=$(date +%s)
    #date: 2018-11-28T15:14:39+10:00

    read -r -d '' FRONTMATTER <<EOF
---
title:  $__TITLE
date:   $__DATE
weight: $__WEIGHT
---

EOF
}

function NB_REPLACE_HOME_STDIN {
    sed -e "s?${HOME}/?~/?g"
}

function NB_ARCHIVE_SOLUTIONS {
    LAB_NAME="$*"

    # set -x
    LAB_NUM=$( echo $LAB_NAME | sed -e 's/^lab//i' -e 's/ .*//' -e 's/\..*//' )
    # set +x
    #echo "LAB_NUM='$LAB_NUM'"

    mkdir -p ~/Solutions/BAK
    SOLUTION_DIR=~/Solutions/Lab${LAB_NUM}
    [ -d $SOLUTION_DIR ] && mv $SOLUTION_DIR ~/Solutions/BAK 2>/dev/null

    mkdir -p $SOLUTION_DIR
    cp -a *.yml *.yaml *.tf *.tfvars *.json $SOLUTION_DIR/ 2>/dev/null
}

#
# Perform nbtool.py processing
# - filters out '#EXCLUDE' cells
# - filters out NB_SET_VARS cells, but picks up VAR values
# - replaces VAR values in cells
# - TODO: Create ToC (Table of Contents) and links to Next section
# - TODO: Autonumber sections/subsections
#
function NB_QUIET {
    # Quiet except on failure --> __FILTER
    pwd
    NB_QUIET_FILTER_NOTEBOOK $* || __FILTER
}
function NB_FILTER {
    pwd
    NB_FILTER_NOTEBOOK $*
}

function NB_QUIET_FILTER_NOTEBOOK {
    pwd
    NB_FILTER_NOTEBOOK $* > ~/tmp/quiet.filter.notebook.op 2>&1
    __CHECK_NB_DIR
    ( cd $NB_DIR;
      ls -altrd ${LAB_IPYNB%.ipynb}.md *.ipynb | tail -2 | NB_COLOUR green;

      R_NB=${LAB_IPYNB}
      TOTAL_CELLS=$(jq -rc '.cells    | length' $R_NB )
      CODE_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="code")) ' $R_NB)
      MD_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="markdown")) ' $R_NB)
      printf "%-30s: %3d cells [ %2d code + %2d markdown ]\n" ${R_NB} $TOTAL_CELLS $CODE_CELLS $MD_CELLS

      R_NB=$( ls -1tr *.ipynb | grep -v ${LAB_IPYNB%.ipynb} | tail -1)
      TOTAL_CELLS=$(jq -rc '.cells    | length' $R_NB )
      CODE_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="code")) ' $R_NB)
      MD_CELLS=$( jq -rc 'def count(stream): reduce stream as $i (0; .+1); count(.cells[]? | select(.cell_type=="markdown")) ' $R_NB)
      printf "%-30s: %3d cells [ %2d code + %2d markdown ]\n" ${R_NB} $TOTAL_CELLS $CODE_CELLS $MD_CELLS
    )
    __RETURN 0
}

function __CHECK_NB_DIR {
    [ -z "$NB_DIR" ] && NB_DIR=$(cat .dir)
    [ -z "$NB_DIR" ] && DIE "NB_DIR is unset"
    env | grep ^NB_DIR= || DIE "NB_DIR is not exported"
    echo "NB_DIR='$NB_DIR'"
}

function NB_FILTER_NOTEBOOK {
    __CHECK_NB_DIR
    ( cd $NB_DIR;
    
    echo
    echo "======== Filtering current notebook [$LAB_IPYNB] ========"
    echo "**** $(date): Notebook filtered on ${HOSTNAME} ${ENVIRONMENT}"; echo

    NB_ARCHIVE_SOLUTIONS $LAB_NAME

    # Re-source latest version:
    echo "-- source $NBTOOL_FN" | NB_REPLACE_HOME_STDIN
    [ -z "$NBTOOL_FN" ] && DIE "NBTOOL_FN is unset"
    source $NBTOOL_FN

    # In kubelab:
    # Jupyter on Ubuntu, or in kubelab:
    export PATH=~/.venv/jupyter_bash/bin:$PATH
    which python3
    PYTHON3=$(which python3 || echo /opt/conda/bin/python3)

    echo; echo "======== FILTERING NOTEBOOK ===================================================="
    CMD="$PYTHON3 $NBTOOL_PY -f $LAB_IPYNB"
    echo; echo "-- $CMD" | NB_REPLACE_HOME_STDIN
    $CMD
    echo "======== FILTERING DONE ========================================================"; echo
    __CHECK_NB_DIR

    OP_NOTEBOOK=$(ls -1tr $NB_DIR/ | grep filtered.ipynb$ | tail -1)
    [ -z "$OP_NOTEBOOK" ] && {
        which python3
        echo "[$PWD] Error: failed to find filtered *.ipynb in directory '$NB_DIR'"
        ls -1tr $NB_DIR/ | grep .ipynb$ | NB_REPLACE_HOME_STDIN | sed 's/^/::/'
        exit 1
    }

    # Attempt line-wrapped cells:
    #   based on https://medium.com/znippet/adding-word-wrap-to-jupyter-notebooks-97040d131784
    OP_NOTEBOOK_LINEWRAPPED=${OP_NOTEBOOK%.ipynb}.LineWrapped.ipynb
    jq '. + { "MarkdownCell": { "cm_config": { "lineWrapping": true } }, "CodeCell": { "cm_config": { "lineWrapping": true } } }' \
        ${OP_NOTEBOOK} > ${OP_NOTEBOOK_LINEWRAPPED}

    ls -altr $OP_NOTEBOOK
    ls -altr $OP_NOTEBOOK| NB_REPLACE_HOME_STDIN

    # Detect visibility of EXCLUDE/FN_EXCL in output (even if "# EXCLUDE" rather than "#EXCLUDE"):
    echo "Checking for 'EXCLUDE|FN_EXCL' in filtered notebook"
    grep -qE "EXCLUDE|FN_EXCL" $OP_NOTEBOOK && {
        echo; echo "---- Error: EXCLUDE/FN_EXCL seen in $OP_NOTEBOOK:"
        echo "Occurrences of EXCLUDE in $OP_NOTEBOOK:" $( grep -o EXCLUDE $OP_NOTEBOOK | wc -l )
        #grep EXCLUDE $OP_NOTEBOOK | NB_HIGHLIGHT_MATCH EXCLUDE
        echo "Occurrences of FN_EXCL in $OP_NOTEBOOK:" $( grep -o FN_EXCL $OP_NOTEBOOK | wc -l )
        #grep FN_EXCL $OP_NOTEBOOK | NB_HIGHLIGHT_MATCH FN_EXCL

        JUPYTEXT=$( which jupytext )
        echo "JUPYTEXT='$JUPYTEXT'"
        if [ -x "$JUPYTEXT" ]; then
            jupytext --to sh:percent $OP_NOTEBOOK # filtered
            grep -nE -A 5 "EXCLUDE|FN_EXCL" ${OP_NOTEBOOK%.ipynb}.sh # filtered
        fi

        ls -altr ${LAB_IPYNB}  ${LAB_IPYNB%.ipynb}.sh
        echo "-------------------------------------------------"
    }

    echo "Checks specific to TF/K8S:"
    __TF_OK="TF_DATA_DIR|__TF_VAR_|__TF_INPUT|__TF_CLI|__TF_CLI_ARG|__TF_LOG"
    grep "__TF_"  $OP_NOTEBOOK | grep -vE $__TF_OK | NB_HIGHLIGHT_MATCH __TF_
    grep "K_"  $OP_NOTEBOOK | NB_HIGHLIGHT_MATCH K_

    S_NB=$( echo $LAB_IPYNB | NB_REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $LAB_IPYNB | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in i/p file"
    } || {
        echo; echo "$NUM VAR defs/usages in i/p file: $S_NB"
        # jq '.' $LAB_IPYNB | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __
        # DIE "Can't continue"
    }

    S_OP_NB=$( echo $OP_NOTEBOOK | NB_REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in o/p file"
    } || {
        echo; echo "Error: $NUM VAR defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __ | NB_HIGHLIGHT
        #DIE "Can't continue"
    }

    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c '${__' )
    [ "$NUM" != "0" ] && {
        echo; echo "Error: $NUM \${__XX} defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n '${__' | NB_HIGHLIGHT
        #DIE "Can't continue"
    }

    echo "Performing NB_CONVERT"
    [ "$LAB_IPYNB" = "${LAB_IPYNB##*TEST}" ] && NB_CONVERT
    )

    return 0
}

function NB_CONVERT {
    __CHECK_NB_DIR
   (
        cd $NB_DIR;

        # TODO after nbconvert ??
        # ansi highlighting => strip output and add as separate html
        #   command | TREAT_OUTPUT
        #   command | TREAT_OUTPUT yaml

        CMD="jupyter-nbconvert --to markdown $OP_NOTEBOOK"
        echo; echo "-- $CMD"; $CMD
        CMD="jupyter-nbconvert --to html $OP_NOTEBOOK"
        echo; echo "-- $CMD"; $CMD

        echo "$FRONTMATTER"           > ${LAB_IPYNB%.ipynb}.md
        OP_NOTEBOOK_MD=${OP_NOTEBOOK%.ipynb}.md
        sed \
            -e 's?\.\./\.\./\.\./static/images/?/images/?' \
            -e 's?\.\./images/?/images/?' \
            $OP_NOTEBOOK_MD >> ${LAB_IPYNB%.ipynb}.md
        mv     $OP_NOTEBOOK_MD ${OP_NOTEBOOK_MD}.bak
        cp -a  $OP_NOTEBOOK ${OP_NOTEBOOK}.bak

        #echo; ls -altr *.md | NB_COLOUR green

        #TEST: cp /dev/null $OP_NOTEBOOK
        #echo
        NB_CHECK_FILE_SIZE $OP_NOTEBOOK 1000 || {
            #ls -altr $OP_NOTEBOOK
            DIE "File $OP_NOTEBOOK is too small - supsicious"
        }

        NUM_LONG_LINES=$( NB_SHOW_LONG_LINES -m $MAX_LEN_MD ${LAB_IPYNB%.ipynb}.md | wc -l )
        if [ "$NUM_LONG_LINES" != "0" ]; then
            echo
            echo "---- $NUM_LONG_LINES long lines (> $MAX_LEN_MD) in ${LAB_IPYNB%.ipynb}.md:"
        fi

        NB_CHECK_FILE_SIZE ${LAB_IPYNB%.ipynb}.md 1000 || {
            DIE "File ${LAB_IPYNB%.ipynb}.md is too small - supsicious"
        }

        # Sanitize notebook/markdown filename:
        NAME=$( echo $LAB_NAME | sed -e 's/  */_/g' -e 's/_-_/-/g' -e 's/\._/\./' )
        mv $OP_NOTEBOOK ${NAME}.ipynb

        ## Remove leading spaces from markdown file:
        #  Disabled - messes up output cells under Hugo (no black background)

        # FILTER_OK_CHECK:
        #echo; ls -altr ${NAME}.*  | NB_COLOUR green
        echo; ls -altr ${LAB_IPYNB%.ipynb}.md ${NAME}.*  | NB_COLOUR green
        #ls -altr *.md
    )
}

# Special   FUNCTIONS: ------------------------------------------------

# at line level:
# - EXEC    command: implemented here and in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 
#
# - NO_EXEC command: implemented here and in nbtools.py
#       => don't execute in orig     notebook, 
#       =>       execute in filtered notebook, 
#
# at cell level:
# - command # EXCLUDE: implemented in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 

# Don't perform this step, but filtering will still leave the command in code cell
# TODO: implement this in nbtool.py (just remove NO_EXEC)_
# e.g. use as
#     NO_EXEC . ~/.bashrc
# CODE: nbtool.py will replace source_line by first line of output text (which is then removed from output_text)
# - useful when command is a variable
# e.g. code cell contents are:  (output set to actual value of $__CMD)
#    CODE $__CMD # Must be first line in code cell
#    EXEC $__CMD
function NB_CODE                    { echo $*;                            return 0;  }
function NB_NO_EXEC                 {                                     return 0;  }
function NB_EXEC                    { $*;                                 return $?; }

# __* FUNCTIONS: ------------------------------------------------

function NB_HIDE            { grep -v $* ;                        return 0; }

function NB_HIGHLIGHT       { grep --color=always -E "|.*${*}.*"; return 0; }
function NB_HIGHLIGHT_EOL   { grep --color=always -E "|${*}.*";   return 0; }
function NB_HIGHLIGHT_SOL   { grep --color=always -E "|.*${*}";   return 0; }
function NB_HIGHLIGHT_MATCH { grep --color=always -E "${*}";    return 0; }

#echo HELLO WORLD from Jupyter | __HIGHLIGHT WORLD
#echo HELLO WORLD from Jupyter | __HIGHLIGHT_EOL WORLD
#echo HELLO WORLD from Jupyter | __HIGHLIGHT_SOL WORLD

# VARIABLE  FUNCTIONS: ------------------------------------------------

function NB_SET_VAR {
    local VARNAME=$1; shift

    # DETECT A=B form:
    [ "${VARNAME#*=}" != "$VARNAME" ] && {
        echo "NB_SET_VAR: [A=B] Correcting VARNAME '$VARNAME' to '${VARNAME%%=*}'"
        local ARGS="${VARNAME#*=}"
        VARNAME=${VARNAME%%=*}
        #set -- ${VARNAME#*=}
        set -- $ARGS
        echo "Setting args to $*"
        #echo "Leaving args as $*"
    }

    # DETECT VARNAME not preceded by __
    [ "${VARNAME#__}" = "$VARNAME" ] && {
        echo "NB_SET_VAR: [not __A] Correcting var name '$VARNAME' to '__$VARNAME'"
        echo "export $VARNAME=$*"
        export $VARNAME=$*
        VARNAME=__$VARNAME
    }

    # Output variables so they will be seen by nbtool.py:
    local VALUE="$*"
    echo $VALUE | grep -q $HOME && {
        VALUE=$(echo $VALUE | sed -e "s?$HOME?~?g")
    }
    eval $VARNAME="$VALUE"
    #echo "VAR $VARNAME='$VALUE'"
    echo "VAR $VARNAME='$VALUE'"
    echo "export $VARNAME='$VALUE'"
    export $VARNAME
}

# Usage:
# NB_SET_VAR_LAST_FILE args
function NB_SET_VAR_LAST_FILE {
    __LAST_FILE=$(ls -1tr . | tail -1)
    echo VAR __LAST_FILE=$__LAST_FILE
    return 0
}

# function NB_WAIT { sleep $1; cat; return 0; }

# Sleep and cell will be excluded
function NB_WAIT {
    sleep $1;
    return 0
}

function NB_WAIT_CMD {
    #set -x
    echo $* >/tmp/WAIT_CMD
    
    while ! eval "$*" >>/tmp/WAIT_CMD 2>&1; do
        #echo looping ...
        sleep 1
    done
    return 0
}

function __RETURN {
    [ -z "$1" ] && return 0
    return $1
}

