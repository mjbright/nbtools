
[ "$1" = "-x" ] && set -x

SCRIPT_DIR=$(dirname ${BASH_SOURCE[0]})
# This file:
NBTOOL_RC=$SCRIPT_DIR/nbtool.rc
NBTOOL_PY=$SCRIPT_DIR/nbtool.py

ENVIRONMENT=""
[ -f ~/.environment ] && ENVIRONMENT=$( head -1 ~/.environment )

HOSTNAME=$(hostname)

DEBUG_WAIT=0
WAIT_SLEEP=1

#EXCL_FN_COLOUR() { grep --color always ''; }
#EXCL_FN_COLOUR() { sed -e 's/^/\\01b[1;34m/' -e 's/$/\\01b[0m/'; }

EXCL_FN_COLOUR() {
    # #  NORMAL;           BOLD;                 INVERSE;
    # _black='\e[00;30m';  _L_black='\e[01;30m';  _I_black='\e[07;30m'
    # _white='\e[00;37m';  _L_white='\e[01;37m';  _I_white='\e[07;37m'
    # _red='\e[00;31m';    _L_red='\e[01;31m';    _I_red='\e[07;31m'
    # _green='\e[00;32m';  _L_green='\e[01;32m'   _I_green='\e[07;32m'
    # _yellow='\e[00;33m'; _L_yellow='\e[01;33m'  _I_yellow='\e[07;33m'
    # _blue='\e[00;34m'    _L_blue='\e[01;34m'    _I_blue='\e[07;34m'
    # _magenta='\e[00;35m' _L_magenta='\e[01;35m' _I_magenta='\e[07;35m'
    # _cyan='\e[00;36m'    _L_cyan='\e[01;36m'    _I_cyan='\e[07;36m'

    case "$1" in
        red)       sed "s,.*,\x1B[31m&\x1B[0m,";;
        boldgreen) sed "s,.*,\x1B[01;32m&\x1B[0m,";;
        green)     sed "s,.*,\x1B[32m&\x1B[0m,";;
        yellow)    sed "s,.*,\x1B[33m&\x1B[0m,";;
        blue)      sed "s,.*,\x1B[34m&\x1B[0m,";;

        *)         sed "s,.*,\x1B[31m&\x1B[0m,";;
    esac
}

# STUFF TO DO: --------------------------------------------------------

# option to remove Nth argument  and comment
# e.g.
#    ls -al # STRIP_ARG 2 ==> 'ls'

# RECORD NEW FUNCTIONS: -----------------------------------------------

FN_0_LIST_ORIG=/tmp/nbtool.functions.0.list
FN_0_LIST=/tmp/nbtool.functions.0.list
FN_1_LIST=/tmp/nbtool.functions.1.list

if [ -f $FN_0_LIST ]; then
    FN_0_LIST=/tmp/nbtool.functions.0.rep.list
    FN_1_LIST=/tmp/nbtool.functions.1.rep.list
fi
typeset -f > $FN_0_LIST

# SETUP     FUNCTIONS: ------------------------------------------------
# Source .jupyer.profile, then demonstrate kubectl working:

DIE() {
    echo "die - $*" | EXCL_FN_HIGHLIGHT
    exit 1
}

CHECK_FILE_SIZE() {
    local FILE=$1; shift;
    local MIN_BYTES=$1; shift;

    SIZE=$( stat -c %s $FILE )
    [[ $SIZE -lt $MIN_BYTES ]] && {
        echo "File looks suspiciously small"
        ls -al $FILE 
        return 1
    }
    return 0
}

EXCL_FN_INIT_NOTEBOOK() {
    NB=""
    if [ -z "$1" ]; then
        NB="README.ipynb"
    else
        NB=$( basename "$1" )
    fi

    [ ! -f "$NB" ] && DIE "[$PWD] No such notebook as '$NB'"

    echo; echo "******** $(date): Notebook initialized on ${HOSTNAME} ${ENVIRONMENT}"; echo
    
    #set -x
    set +x

    if [ -f README.ipynb ]; then
        if [ -f .dir ]; then
            # Detect moved dir with out of date ~/.dir
            [ "$PWD" != "$(cat .dir)" ] && DIE ".dir out of date";
            NB_DIR=$PWD
        else
            echo $PWD > .dir
        fi

        NB_DIR=$(cat .dir)
        NB=$NB_DIR/$NB
        echo "NB_DIR=$NB_DIR" | EXCL_FN_HIGHLIGHT
    fi

    #echo "==== Reading nbtool functions from '$NBTOOL_RC' ===="
    #[ ! -f $NBTOOL_RC ] && DIE "No such file '$NBTOOL_RC'"
    #. $NBTOOL_RC

    case $LAB_MODE in
        Terraform)
            rm -rf ~/tmp/terraform*
            echo; echo "==== Setting TF_DATA_DIR ===="
            export TF_DATA_DIR=~/dot.terraform; echo "TF_DATA_DIR=$TF_DATA_DIR" | EXCL_FN_HIGHLIGHT_EOL =
            echo; echo "==== Setting AWS vars for student20 account ===="
            . ~/.aws/linked/student20.rc; env | grep MYAWS_ACCOUNT_NAME= | EXCL_FN_HIGHLIGHT_EOL =
            #env | grep AWS_LINKED_ACCOUNT= | EXCL_FN_HIGHLIGHT_EOL =
            ;;

        Kubernetes)
            [ -z "$KUBECONFIG" ] && export KUBECONFIG=~/.kube/config
            echo "KUBECONFIG='$KUBECONFIG'"
            grep current-context "$KUBECONFIG" | grep -q kubernetes-admin && echo "## ASSUMING full cluster admin rights"
            grep server: $KUBECONFIG
            kubectl get nodes
            kubectl config get-contexts
            #DEBUG_WAIT=1; EXCL_FN_CLEANUP; DEBUG_WAIT=0
            #kubectl delete pods -lapp=web-student0
            ;;

        *)
            echo "Error: Unknown LAB_MODE '$LAB_MODE' - should be one of Terraform or Kubernetes" | EXCL_FN_HIGHLIGHT
            banner ERR
            return
            ;;
    esac

    #rm -rf ~/labs
    #NO_EXEC echo SHOULD NOT BE SEEN | EXCL_FN_HIGHLIGHT_SOL SHOULD
    #EXEC    echo SHOULD BE SEEN     | EXCL_FN_HIGHLIGHT_SOL SHOULD

    #echo "LABTAG=$LAB_TAG" | EXCL_FN_HIGHLIGHT_EOL =
    echo "==== $LAB_MODE Lab weight[$LAB_WEIGHT] / tag[$LAB_TAG] / name[$LAB_NAME] ====" | EXCL_FN_HIGHLIGHT_EOL weight
    SET_FRONTMATTER "$LAB_NAME" "$LAB_WEIGHT"

    echo "NB_DIR=$NB_DIR"
    echo "NB=$NB"
    EXCL_FN_FILTER_NOTEBOOK $NB
}

EXCL_FN_LAB_ENV() {
    echo "$(date +%Y-%b-%d):[$ENVIRONMENT] Lab updated on node ${HOSTNAME}[$(kubectl version --short )]"
}

EXCL_FN_k8s_SETUP() {
    [ ! -z "$_SETUP_RUN" ] && return 0
    export _SETUP_RUN=$(date)

    # Jupyter on Ubuntu, or in kubelab:
    [ $(id -un) = "root" ] && export HOME=/root
    ## [ -f /root/.profile ]         && . /root/.profile
    ## [ -f /root/.jupyter.profile ] && . /root/.jupyter.profile
    export PATH=~/bin:$PATH
    #### ls -altr ~/
    kubectl get pods

    echo "$(kubectl get nodes master -o custom-columns=IP:.status.addresses[0].address --no-headers) master" >> /etc/hosts
    echo "$(kubectl get nodes worker1 -o custom-columns=IP:.status.addresses[0].address --no-headers) worker1" >> /etc/hosts

    echo
    echo "/etc/hosts inside kubelab Pod:"
    cat /etc/hosts

    typeset -f > $FN_1_LIST
    ALL_ADD_FNS=$(diff $FN_0_LIST_ORIG $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
    [ ! -z "$ALL_ADD_FNS" ] && echo "All added functions: $ALL_ADD_FNS"
    [ "$FN_0_LIST_ORIG" != "$FN_0_LIST" ] && {
        NEW_ADD_FNS=$(diff $FN_0_LIST $FN_1_LIST | grep "^> .* ()" | sed -e 's/^>  *//' -e 's/ ()//' | grep -v functions: | tr '\n' ' ')
        [ ! -z "$NEW_ADD_FNS" ] && echo "New functions: $NEW_ADD_FNS"
    }
}

# NOTEBOOK  FUNCTIONS: ------------------------------------------------

# SET_FRONTMATTER:

SET_FRONTMATTER() {
    local __TITLE="$1"; shift
    local __WEIGHT="$1"; shift

    #local __DATE=$(date)
    local __DATE=$(date  --iso-8601=seconds)
    #date: 2018-11-28T15:14:39+10:00

    read -r -d '' FRONTMATTER <<EOF
---
title:  $__TITLE
date:   $__DATE
weight: $__WEIGHT
---

EOF
}

REPLACE_HOME_STDIN() {
    sed -e "s?${HOME}/?~/?g"
}

#
# Perform nbtool.py processing
# - filters out '#EXCLUDE' cells
# - filters out SET_VARS cells, but picks up VAR values
# - replaces VAR values in cells
# - TODO: Create ToC (Table of Contents) and links to Next section
# - TODO: Autonumber sections/subsections
#
EXCL_FN_FILTER_NOTEBOOK() {
    NOTEBOOK="$1"
    [ -z "$NOTEBOOK" ] && NOTEBOOK=README.ipynb
    
    echo; echo "==== Filtering current notebook [$NOTEBOOK] ===="
    echo; echo "******** $(date): Notebook filtered on ${HOSTNAME} ${ENVIRONMENT}"; echo

    # Re-source latest version:
    echo "-- . $NBTOOL_RC" | REPLACE_HOME_STDIN
    . $NBTOOL_RC

    # In kubelab:
    # Jupyter on Ubuntu, or in kubelab:
    PYTHON3=$(which python3 || echo /opt/conda/bin/python3)
    #CMD="/opt/conda/bin/python3 ./nbtool.py -f $NOTEBOOK"
    #CMD="$PYTHON3 ./nbtool.py -f $NOTEBOOK"

    #if [ "$NOTEBOOK" = "${NOTEBOOK##*TEST}" ]; then
    #else
        ## TEST notebook:
    #fi
    CMD="$PYTHON3 $NBTOOL_PY -f $NOTEBOOK"
    echo; echo "-- $CMD" | REPLACE_HOME_STDIN
    $CMD

    #OP_NOTEBOOK=$(ls -1tr $NB_DIR/README*.ipynb | grep filtered | tail -1)
    OP_NOTEBOOK=$(ls -1tr $NB_DIR/ | grep filtered.ipynb$ | tail -1)

    # echo "==============="
    # ls -1tr $NB_DIR/ 
    # echo "==============="
    # ls -1tr $NB_DIR/ | grep filtered | sed 's/^/>> /'
    # echo "==============="

    [ -z "$OP_NOTEBOOK" ] && {
        echo "[$PWD] Error: failed to find filtered README*.ipynb in directory '$NB_DIR'"
        ls -1tr $NB_DIR/ | grep .ipynb$ | REPLACE_HOME_STDIN | sed 's/^/::/'
        exit 1
    }
    ls -altr $OP_NOTEBOOK| REPLACE_HOME_STDIN
    # WHY? grep EXCLUDE $OP_NOTEBOOK
    grep -qE "EXCLUDE|FN_EXCL" $OP_NOTEBOOK && {
        echo; echo "-- Error: EXCLUDE/FN_EXCL seen in $OP_NOTEBOOK:"
        grep EXCLUDE $OP_NOTEBOOK | EXCL_FN_HIGHLIGHT_MATCH EXCLUDE
        grep FN_EXCL $OP_NOTEBOOK | EXCL_FN_HIGHLIGHT_MATCH FN_EXCL
    }

    TF_OK="TF_DATA_DIR|TF_VAR_|TF_INPUT|TF_CLI|TF_CLI_ARG|TF_LOG"
    grep "TF_"  $OP_NOTEBOOK | grep -vE $TF_OK | EXCL_FN_HIGHLIGHT_MATCH TF_
    grep "K_"  $OP_NOTEBOOK | EXCL_FN_HIGHLIGHT_MATCH K_

    S_NB=$( echo $NOTEBOOK | REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in i/p file"
    } || {
        echo; echo "$NUM VAR defs/usages in i/p file: $S_NB"
        # jq '.' $NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __
        # DIE "Can't continue"
    }

    S_OP_NB=$( echo $OP_NOTEBOOK | REPLACE_HOME_STDIN )
    __EXCLUDE="__start_kubectl"
    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c __ )
    [ "$NUM" = "0" ] && {
        echo; echo "Good: No VAR defs/usages in o/p file"
    } || {
        echo; echo "Error: $NUM VAR defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n __ | EXCL_FN_HIGHLIGHT
        #DIE "Can't continue"
    }

    NUM=$( jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -c '${__' )
    [ "$NUM" != "0" ] && {
        echo; echo "Error: $NUM \${__XX} defs/usages in o/p file: $S_OP_NB"
        #echo; echo "VARS in output file: $S_OP_NB"
        jq '.' $OP_NOTEBOOK | grep --color=NEVER -vE "$__EXCLUDE" | grep -n '${__' | EXCL_FN_HIGHLIGHT
        #DIE "Can't continue"
    }

    [ "$NOTEBOOK" = "${NOTEBOOK##*TEST}" ] && EXCL_FN_NBCONVERT

    return 0
}

EXCL_FN_NBCONVERT() {
   (
        cd $NB_DIR;

        # TODO after nbconvert ??
        # ansi highlighting => strip output and add as separate html
        #   command | TREAT_OUTPUT
        #   command | TREAT_OUTPUT yaml

        CMD="jupyter-nbconvert --to markdown $OP_NOTEBOOK"
        echo; echo "-- $CMD"
        $CMD

        echo "$FRONTMATTER"           > README.md
        OP_NOTEBOOK_MD=${OP_NOTEBOOK%.ipynb}.md
        sed -e 's?../../../static/images/?/images/?' $OP_NOTEBOOK_MD >> README.md
        cat $OP_NOTEBOOK_MD >> README.md
        mv     $OP_NOTEBOOK_MD ${OP_NOTEBOOK_MD}.bak
        cp -a  $OP_NOTEBOOK ${OP_NOTEBOOK}.bak

        #echo; ls -altr *.md | EXCL_FN_COLOUR green

        #TEST: cp /dev/null $OP_NOTEBOOK
        #echo
        CHECK_FILE_SIZE $OP_NOTEBOOK 1000 || {
            #ls -altr $OP_NOTEBOOK
            DIE "File $OP_NOTEBOOK is too small - supsicious"
        }

        #cp /dev/null README.md
        #echo
        CHECK_FILE_SIZE README.md 1000 || {
            #ls -altr README.md
            DIE "File README.md is too small - supsicious"
        }

        NAME=$( echo $LAB_NAME | sed 's/  */_/g' )
        mv $OP_NOTEBOOK ${NAME}.ipynb
        # Save as a dotfile to not perturb Hugo serving:
        #cp -a  README.md .${NAME}.md
        mv README.md ${NAME}.md

        # FILTER_OK_CHECK:
        #echo; ls -altr $NB_DIR/README.md | EXCL_FN_COLOUR green
        echo; ls -altr ${NAME}.*  | EXCL_FN_COLOUR green
        #ls -altr *.md
    )
}

# Special   FUNCTIONS: ------------------------------------------------

# at line level:
# - EXEC    command: implemented here and in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 
#
# - NO_EXEC command: implemented here and in nbtools.py
#       => don't execute in orig     notebook, 
#       =>       execute in filtered notebook, 
#
# at cell level:
# - command # EXCLUDE: implemented in nbtools.py
#       =>       execute in orig     notebook, 
#       => don't appear  in filtered notebook, 

# Don't perform this step, but filtering will still leave the command in code cell
# TODO: implement this in nbtool.py (just remove NO_EXEC)_
# e.g. use as
#     NO_EXEC . ~/.bashrc
NO_EXEC()                 {                                     return 0;  }
EXEC()                    { $*;                                 return $?; }

# EXCL_FN_* FUNCTIONS: ------------------------------------------------

# Terraform-specific:
TF_INIT() {
    terraform init $*
}

TF_PLAN() {
    terraform plan $*
}

TF_APPLY() {
    terraform apply -auto-approve $*
}

EXCL_FN_TF_DESTROY() {
    TF_DESTROY $*
}

TF_DESTROY() {
    terraform destroy -auto-approve $*
}

# Kubernetes-specific:
K_GET() {
    kubectl get $*
    # TODO: If kubectl get svc, get service => recuperate IP, PORT info
    # TODO: If kubectl get po, get pod      => recuperate IP, PORT info
}

K_CREATE() {
    kubectl create $*
    # TODO: If kubectl create svc, create service => recuperate IP, PORT info
    # TODO: If kubectl create dep, create deploy  => recuperate IP, PORT info
    # TODO: If kubectl run                        => recuperate IP, PORT info
    # Check in YAML ?!
    #if [ "$1" = "pod" ]; then
    #fi

    # TODO:
    # Create deploy - wait for Pods ready? ==> NO use WAIT_PODS function
}


# Hide stdin elements matching arguments,
# e.g. use as
#      ls | EXCL_FN_HIDE hidden_files

EXCL_FN_HIDE()            { grep -v $* ;                        return 0; }

EXCL_FN_HIGHLIGHT()       { grep --color=always -E "|.*${*}.*"; return 0; }
EXCL_FN_HIGHLIGHT_EOL()   { grep --color=always -E "|${*}.*";   return 0; }
EXCL_FN_HIGHLIGHT_SOL()   { grep --color=always -E "|.*${*}";   return 0; }
EXCL_FN_HIGHLIGHT_MATCH() { grep --color=always -E "${*}";    return 0; }

#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT WORLD
#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT_EOL WORLD
#echo HELLO WORLD from Jupyter | EXCL_FN_HIGHLIGHT_SOL WORLD

# VARIABLE  FUNCTIONS: ------------------------------------------------

SET_VAR() {
    local VARNAME=$1; shift

    [ "${VARNAME#*=}" != "$VARNAME" ] && {
        echo "Correcting VARNAME '$VARNAME' to '${VARNAME%%=*}'"
        local ARGS="${VARNAME#*=}"
        VARNAME=${VARNAME%%=*}
        #set -- ${VARNAME#*=}
        set -- $ARGS
        echo "Setting args to $*"
        #echo "Leaving args as $*"
    }

    [ "${VARNAME#__}" = "$VARNAME" ] && {
        echo "Correcting var name '$VARNAME' to '__$VARNAME'"
        VARNAME=__$VARNAME
    }

    # Output variables so they will be seen by nbtool.py:
    local VALUE="$*"
    echo $VALUE | grep -q $HOME && {
        VALUE=$(echo $VALUE | sed -e "s?$HOME?~?g")
    }
    eval $VARNAME="$VALUE"
    #echo "VAR $VARNAME='$VALUE'"
    echo "VAR $VARNAME=\"$VALUE\""
}

# Usage:
# SET_VAR_LAST_FILE args
SET_VAR_LAST_FILE() {
    __LAST_FILE=$(ls -1tr . | tail -1)
    echo VAR __LAST_FILE=$__LAST_FILE
    return 0
}

SET_NAMESPACE() {
    local __NS_ARG="$1"; 

    [ ! -z "$__NS_ARG" ] && { NS=$__NS_ARG; return; }

    # Note: --minify removes all output not used by the current context from the output
    local __NS=$(kubectl config view --minify -o 'jsonpath={..namespace}')

    [ ! -z "$__NS" ] && { NS=$__NS; return; }

    # If __NS is unset then default is the namespace:
    NS="default"
}

K_GET_SVC() {
    SET_NAMESPACE
    [ "$1" = "-n" ] && { NS=$2; shift; shift; }

    kubectl -n $NS get svc $*
    SET_VAR_SVC_IP $1
    SET_VAR_SVC_PORT $1
    SET_VAR_SVC_EXTIP $1
}

K_GET_PODS() {
    SET_NAMESPACE
    [ "$1" = "-n" ] && { NS=$2; shift; shift; }
    POD_NAME=$1;

    #kubectl get pod $*
    kubectl -n $NS get pod | grep " $POD_NAME"
    SET_VAR_POD_IPS  $POD_NAME   $NS
    SET_VAR_POD_NAME $POD_NAME 1 $NS
}

# Usage: SET_VAR_POD_IPS -n <ns> podname
# curl -sL http://$__POD_IPS
SET_VAR_POD_IPS() {
    #set -x
    POD_NAME="$1"
    SET_NAMESPACE "$2"
    
    #POD_IP=$(kubectl -n $NS get pods "$POD_NAME" -o custom-columns=NAME:.status.podIP --no-headers)
    __POD_IPS=$(kubectl -n "$NS" get pods -o wide | awk "/^$POD_NAME/ { print \$6; }")
    # WHY FAILING??
    #   __POD_IP=${__POD_IPS%% *}
    #   __POD_IP=$( echo "${__POD_IPS}" | awk '{ print $1; }')
    #   __POD_IP=$( echo "${__POD_IPS}" | sed 's/\([0-9,.]*\).*/X\1/' )
    __POD_IP=$(kubectl -n "$NS" get pods -o wide | awk "/^$POD_NAME/ { print \$6; exit(0); }")
    echo VAR __POD_IP=$__POD_IP
    echo VAR __POD_IPS=$__POD_IPS
    return 0
}

SET_VAR_SVC_IP() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_IP=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=IP:.spec.clusterIP --no-headers)
    echo VAR __SVC_IP=$__SVC_IP
    return 0
}

SET_VAR_SVC_EXTIP() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_EXTIP=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=IP:.spec.externalIPs[0] --no-headers)
    echo VAR __SVC_EXTIP=$__SVC_EXTIP
    return 0
}

SET_VAR_SVC_PORT() {
    __SVC_NAME="$1"
    SET_NAMESPACE "$2"
    
    __SVC_PORT=$(kubectl -n $NS get service "$__SVC_NAME" -o custom-columns=NP:.spec.ports[0].nodePort --no-headers)
    echo VAR __SVC_PORT=$__SVC_PORT
    return 0
}

SET_VAR_NODE_IP() {
    __NODE_NAME="$1"
    SET_NAMESPACE "$2"
    
    __NODE_IP=$(kubectl get node "$__NODE_NAME" -o custom-columns=IP:.status.addresses[0].address --no-headers)
    echo VAR __NODE_IP=$__NODE_IP
    return 0
}

SET_VAR_IDX() {
    VAR_NAME=$1; shift
    IDX=$1;      shift

    NEW_VAR_NAME=${VAR_NAME%S}
    #NEW_VAR_NAME=${NEW_VAR_NAME%S}
    
    eval VALUE="\$$VAR_NAME"
    echo VALUE=$VALUE
    while [ $IDX -gt 1 ]; do
        echo "[$IDX] VALUE=$VALUE"
        VALUE=${VALUE#* }
        let IDX=IDX-1
    done
    VALUE=${VALUE%% *}
    echo eval $NEW_VAR_NAME=$VALUE
    eval $NEW_VAR_NAME="$VALUE"
    return 0
}

FOREACH() {
    __VAR_NAME=$1; shift
    #echo "\$*=$*"
           
    __VAR_NAME_s="${__VAR_NAME}S"
    #echo "__VAR_NAME_s=$__VAR_NAME_s"
    #echo "__POD_IPS=$__POD_IPS"
    eval __VALUES="\$$__VAR_NAME_s"
    #echo "__VALUES=$__VALUES"
    
    for __VALUE in $__VALUES; do
        eval $__VAR_NAME=$__VALUE
        #echo
        #echo "__POD_IP=$__POD_IP"
        #echo "\$*=$*"
        eval $*
    done
    return 0
}

TEST_VAR_FUNCTIONS() {
    #SET_VAR_POD_IPS k8s-demo
    SET_VAR_POD_IPS kube-system coredns
    echo $__POD_IPS

    SET_VAR_SVC_IP kubernetes
    echo $__SVC_IP

    SET_VAR_SVC_PORT k8s-demo-np
    echo $__SVC_PORT

    #__POD_IPS="1.a.b.c.d 2.A.B.C.E 3.a.B.c.F 4.4 5.5 6.6 7.7 8.8"
    #SET_VAR_IDX __POD_IPS 3
    #echo $__POD_IP

    SET_VAR_NODE_IP master
    echo $__NODE_IP

    FOREACH __POD_IP echo "POD_IP=\$__POD_IP"
}

SET_VAR_POD_NAME() {
    local PODNAME_MATCH=$1; shift;
    local POD_IDX=1;
    [ ! -z "$1" ] && { POD_IDX=$1; shift; }
    SET_NAMESPACE "$1"
    __POD_NAME=$(kubectl -n $NS get pods --no-headers | grep $PODNAME_MATCH | head -$POD_IDX | tail -1 | awk '{ print $1; }')
    echo VAR __POD_NAME=$__POD_NAME
}

# WAIT ON EXEC FUNCTIONS: ---------------------------------------------

EXCL_FN_WAIT() { sleep $1; cat; return 0; }

# Sleep and cell will be excluded
WAIT() {
    sleep $1;
    return 0
}

WAIT_CMD() {
    #set -x
    echo $* >/tmp/WAIT_CMD
    
    while ! eval "$*" >>/tmp/WAIT_CMD 2>&1; do
        #echo looping ...
        sleep 1
    done
    return 0
}

### --- TODO ----------------------
### Use kubectl wait
# - In scripts use kubectl wait: kubectl wait --for=condition=available --timeout=60s --all deployments
# 
# See - https://mrkaran.dev/posts/kubectl-wait/

# Waits for at least 1 Pod to be in state (default: Running)

WAIT_PODS() {
    if [ "$1" = "-n" ]; then
        shift; SET_NAMESPACE $1; shift
    else
        SET_NAMESPACE
    fi

    POD_MATCH=$1; shift
    STATE=""
        
    [ ! -z "$1" ] && STATE=$1
    if [ -z "$STATE" ];then
        #echo WAIT_PODS -n $NS $POD_MATCH "(ContainerCreating|Running)"
        #WAIT_PODS -n $NS $POD_MATCH "(ContainerCreating|Running)"
        WAIT_PODS -n $NS $POD_MATCH "Running"
        return 0
    fi

    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for '$POD_MATCH' Pods to start ..."
    while ! kubectl -n $NS get pods | grep -q $POD_MATCH; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo

    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for at least 1 '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    while ! kubectl -n $NS get pods |& grep $POD_MATCH | grep -qE " $STATE "; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo
    
    #### # NEEDS TESTING:
    #### # All in same state:
    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for all '$POD_MATCH' Pods to to be in <$STATE> state  ..."
    while kubectl -n $NS get pods | grep $POD_MATCH | grep -vq " $STATE "; do
    #while ! kubectl -n $NS get pods | grep $POD_MATCH | grep -vq " $STATE "; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    return 0
}

# Note: would be useful a function which waits for *all* matching Pods to be running
WAIT_ALL_PODS_RUNNING() {
    WAIT_SLEEP=2
    while kubectl get pods --no-headers | grep -vq Running; do sleep $WAIT_SLEEP; done
}

WAIT_NO_PODS() {
    if [ "$1" = "-n" ]; then
        shift; SET_NAMESPACE $1; shift
    else
        SET_NAMESPACE
    fi

    if [ -z "$1" ]; then
        while ! kubectl -n $NS get pods |& grep -q "No resources"; do
            [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
            [ $DEBUG_WAIT -ne 0 ] && echo .
            sleep $WAIT_SLEEP
        done
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods
        [ $DEBUG_WAIT -ne 0 ] && echo
        return
    fi

    POD_MATCH=$1; shift
    STATE=""
    
    [ $DEBUG_WAIT -ne 0 ] && echo "---- Waiting for '$POD_MATCH' Pods to terminate ..."
    while kubectl -n $NS get pods |& grep -q $POD_MATCH; do
        [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods |& grep $POD_MATCH
        [ $DEBUG_WAIT -ne 0 ] && echo .
        sleep $WAIT_SLEEP
    done
    [ $DEBUG_WAIT -ne 0 ] && kubectl -n $NS get pods | grep $POD_MATCH
    [ $DEBUG_WAIT -ne 0 ] && echo
    return 0
}

#set +x
#WAIT 1
#WAIT_CMD [ -f /tmp/OK ]
#WAIT_PODS quiz
#WAIT_PODS quiz
#WAIT_PODS quiz "ContainerCreating|Running"

# EXCLUDE CELL FUNCTIONS: ---------------------------------------------

# EXCL_FN_CLEANUP      FUNCTIONS: ---------------------------------------------

EXCL_FN_CLEANUP_TRAEFIK() {
    kubectl -n kube-system delete deploy/traefik-ingress-controller
    kubectl -n kube-system delete svc traefik-ingress-service
    kubectl -n kube-system delete sa/traefik-ingress-controller
    kubectl delete clusterrolebinding/traefik-ingress-controller
    kubectl delete clusterrole/traefik-ingress-controller
    kubectl -n kube-system delete sa/traefik-ingress-controller
}

EXCL_FN_CLEANUP() {
    SET_NAMESPACE "$1"
    echo; echo "== CLEANUP namespace($NS) ==========================="
    #kubectl get ns
    #kubectl delete ns frontend
    echo -n "Deployments: "
    kubectl -n $NS delete deploy --all
    echo -n "Services:    "
    kubectl -n $NS delete service --all
    sleep 2
    echo -n "Pods:        "
    kubectl -n $NS delete pods --all

    #kubectl taint node master node-role.kubernetes.io/master:NoSchedule
    echo; echo "== Remaining pods across all namespaces ==========================="
    kubectl get pods -A
    WAIT_NO_PODS
}

EXEC_FN_CLEANUP_TRAEFIK() {
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml
    kubectl delete -f https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml
}

EXEC_FN_NODES_CHECK() {
    kubectl get node
    kubectl describe node | grep Pressure | grep True
}

# OTHER MISC   FUNCTIONS: ---------------------------------------------

RETURN() {
    [ -z "$1" ] && return 0
    return $1
}

# SETUP SECTION -------------------------------------------------------

#### EXCL_FN_k8s_SETUP

# OTHER NOTES   -------------------------------------------------------

# See kubectl wait remarks above
# kubectl api-resources


