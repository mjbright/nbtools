
set +x

SCRIPT=${BASH_SOURCE[0]}
SCRIPT_DIR=$(dirname $SCRIPT)

[ ! -f README.ipynb ] && {
    echo "[$PWD] $SCRIPT: No README.ipynb in workiing directory"
    exit 1
}

## TODO: If need to reactivate
[ -f ~/.venv/TRAINING/bin/activate ] && {
    OLD_PS1=$PS1; source ~/.venv/TRAINING/bin/activate >/dev/null 2>&1; export PS1=$OLD_PS1
    ## source ~/.venv/TRAINING/bin/activate >/dev/null 2>&1
}

NB_DIR=$PWD
echo "setting NB_DIR=$NB_DIR"

#echo "--- \${BASH_SOURCE[0]}='${BASH_SOURCE[0]}'"
#echo "--- \${BASH_SOURCE[1]}='${BASH_SOURCE[1]}'"
# This file:
export NBTOOL_RC=$SCRIPT_DIR/nbtool.rc
export NBTOOL_FN=$SCRIPT_DIR/nbtool.fn
export NBTOOL_PY=$SCRIPT_DIR/nbtool.py

[ "$1" = "-x" ] && { shift; set -x; }

if [ -z "$STUDENT" ]; then
    echo "STUDENT must be set before starting Jupyter - even is set to unknown"
    exit 1
fi
echo "STUDENT='$STUDENT'"

NBTOOL_INIT=0
if [ ! -z "$1" ]; then
    echo "[$NBTOOL_RC] Got args '$*'"
    NBTOOL_INIT=1

    # -- CONFIG ------------------------------------
    export LAB_TAG=${PWD##*/} 
    export LAB_WEIGHT="$1"; shift
    export LAB_MODE="$1"; shift
    export LAB_NAME="$1"; shift
    export LAB_TAG="${PWD##*/}"; shift
    # ----------------------------------------------
    set | grep ^LAB_ > ~/tmp/LAB_vars.env
    cat ~/tmp/LAB_vars.env
fi

echo "==== Reading nbtool functions from '$NBTOOL_FN' ====";
. $NBTOOL_FN

if [ $NBTOOL_INIT -ne 0 ]; then
    # Now use MAX_LEN_MD in nbtool.rc (instead of "export MAX_LINE_LEN=80" here)

    __FN_INIT_NOTEBOOK
fi

